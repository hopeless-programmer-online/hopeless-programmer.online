import React from 'react'
import { article, c, cm, code, cs, emp, f, fig, illustration, js, jsx, kw, link, lt, neg, paragraph, quote, section, sentence, v } from '../classes/shortcuts'

const esoteric = 'https://uk.wikipedia.org/wiki/%D0%95%D0%B7%D0%BE%D1%82%D0%B5%D1%80%D0%B8%D1%87%D0%BD%D1%96_%D0%BC%D0%BE%D0%B2%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F'

class l0 extends React.Component {
    public render() {
        return (
            <i style={{ fontWeight : 'bold', color : 'crimson', fontFamily : 'Helvetica' }}>L<sup>0</sup></i>
        )
    }
}

const example_linq = illustration('', cs(...[
    [ cm('// рейтинг студентів') ],
    [ kw('var'), ' ', v('rating'), ' =' ],
    [ '    ', kw('from'), '    ', v('student'), ' ', kw('in'), ' ', v('students') ],
    [ '    ', kw('where'), '   ', v('student'), '.', v('faculty'), ' == ', lt('"physics"') ],
    [ '    ', kw('where'), '   ', v('student'), '.', v('year'), ' == ', lt('2') ],
    [ '    ', kw('orderby'), ' ', v('student'), '.', v('score'), '' ],
    [ '    ', kw('group'), '   ', v('student'), ' ', kw('by'), ' ', v('student'), '.', v('group'), ' ', kw('into'), ' ', v('group'), '' ],
    [ '    ', kw('select'), '  ', kw('new'), ' { ', v('group'), ', ', v('student'), ' }' ],
]))
const example_jsx = illustration('', jsx(...[
    [ '', kw('class'), ' ', c('HomePage'), ' ', kw('extends'), ' ', c('React'), '.', c('Component'), ' {' ],
    [ '    ', f('render'), '() {' ],
    [ '        ', kw('return'), ' (' ],
    [ '            <', kw('article'), '>' ],
    [ '                <', kw('header'), '>' ],
    [ '                    <', kw('h1'), '>Ласкаво просимо на мій сайт!</', kw('h1'), '>' ],
    [ '                </', kw('header'), '>' ],
    [ '                <', kw('main'), '>' ],
    [ '                    <', kw('h2'), '>Заголовок</', kw('h2'), '>' ],
    [ '                    <', kw('p'), '>' ],
    [ '                        Лорем іпсум!' ],
    [ '                        Лорем іпсум!' ],
    [ '                        Лорем іпсум!' ],
    [ '                        Лорем іпсум!' ],
    [ '                    </', kw('p'), '>' ],
    [ '                </', kw('main'), '>' ],
    [ '                <', kw('footer'), '>' ],
    [ '                    мій сайт' ],
    [ '                </', kw('footer'), '>' ],
    [ '            </', kw('article'), '>' ],
    [ '        )' ],
    [ '    }' ],
    [ '}' ],
]))
const example_yield = illustration('', js(...[
    [ cm('// оригінальний генератор') ],
    [ '', kw('function'), ' *', f('f'), '() {' ],
    [ '    ', kw('yield'), ' ', lt('true'), ';' ],
    [ '    ', kw('yield'), ' ', lt('10'), ';' ],
    [ '    ', kw('yield'), ' ', lt('"ololo"'), ';' ],
    [ '}' ],
    [ '' ],
    [ cm('// дієтичний генератор') ],
    [ '', kw('function'), ' ', f('f'), '() {' ],
    [ '    ', kw('let'), ' ', v('counter'), ' = ', lt('0'), ';' ],
    [ '    ' ],
    [ '    ', kw('return'), ' {' ],
    [ '        ', v('next'), ' : () => {' ],
    [ '            if (', v('counter'), ' >= ', lt('3'), ') ', kw('return'), ' { ', v('done'), ' : ', lt('true'), ' };' ],
    [ '            ' ],
    [ '            ++', v('counter'), ';' ],
    [ '            ' ],
    [ '            ', kw('switch'), ' (', v('counter'), ') {' ],
    [ '                ', kw('case'), ' 1: ', kw('return'), ' { ', v('done'), ' : ', lt('false'), ', ', v('value'), ' : ', lt('true'), ' };' ],
    [ '                ', kw('case'), ' 2: ', kw('return'), ' { ', v('done'), ' : ', lt('false'), ', ', v('value'), ' : ', lt('10'), ' };' ],
    [ '                ', kw('case'), ' 3: ', kw('return'), ' { ', v('done'), ' : ', lt('false'), ', ', v('value'), ' : ', lt('"ololo"'), ' };' ],
    [ '            }' ],
    [ '        }' ],
    [ '    }' ],
    [ '}' ],
    [ '' ],
    [ '' ],
    [ '' ],
    [ '' ],
]))
const example_jsdoc = illustration('', js(...[
    [ cm('/**') ],
    [ cm(' * @param   {number} a') ],
    [ cm(' * @param   {number} b') ],
    [ cm(' * @returns {number}') ],
    [ cm(' */') ],
    [ kw('function'), ' ', f('add_numbers'), '(', v('a'), ', ', v('b'), ') {' ],
    [ '    ', kw('return'), ' ', v('a'), ' + ', v('b'), ';' ],
    [ '}' ],
]))
const example_assert = illustration('', js(...[
    [ '', kw('function'), ' ', f('add_numbers'), '(', v('a'), ', ', v('b'), ') {' ],
    [ '    ', f('assert'), '(', kw('typeof'), ' ', v('a'), ' === ', lt('"number"'), ');' ],
    [ '    ', f('assert'), '(', kw('typeof'), ' ', v('b'), ' === ', lt('"number"'), ');' ],
    [ '    ' ],
    [ '    ', kw('return'), ' ', v('a'), ' + ', v('b'), ';' ],
    [ '}' ],
    [ '' ],
    [ '', kw('let'), ' ', v('x'), ' = ', f('add_numbers'), '(', lt('1'), ', ', lt('2'), ');' ],
    [ '' ],
    [ '', f('assert'), '(', kw('typeof'), ' ', v('x'), ' === ', lt('"number"'), ');' ],
]))
const example_while = illustration('', code('JavaScript', ...[ // @todo L^0 language
    [ '', kw('function'), ' ', f('while'), '(', v('condition'), ', ', v('body'), ') {' ],
    [ '    ', kw('if'), ' (!', f('condition'), '()) ', kw('return'), ';' ],
    [ '    ' ],
    [ '    ', f('body'), '();' ],
    [ '    ', f('while'), '(', f('condition'), ', ', f('body'), ');' ],
    [ '}' ],
    [ '' ],
    [ '', kw('let'), ' ', v('x'), ' = ', lt('0'), ';' ],
    [ '' ],
    [ '', f('while'), '(() => ', v('x'), ' < ', lt('10'), ', () => {' ],
    [ '    ++', v('x'), ';' ],
    [ '});' ],
]))
const example_logic = illustration('', code('JavaScript', ...[ // @todo L^0 language
    [ '', kw('function'), ' ', f('and'), '(', v('left'), ', ', v('right'), ') {' ],
    [ '    ', kw('if'), ' (!', f('left'), '()) ', kw('return'), ' ', lt('false'), ';' ],
    [ '    ' ],
    [ '    ', kw('return'), ' ', f('right'), '();' ],
    [ '}' ],
    [ '', kw('function'), ' ', f('or'), '(', v('left'), ', ', v('right'), ') {' ],
    [ '    ', kw('if'), ' (', f('left'), '()) ', kw('return'), ' ', lt('true'), ';' ],
    [ '    ' ],
    [ '    ', kw('return'), ' ', f('right'), '();' ],
    [ '}' ],
    [ '' ],
    [ '', f('and'), '(() => ', lt('false'), ', () => ', lt('true'), ')' ],
    [ '', f('or'), '(() => ', lt('true'), ', () => ', lt('false'), ')' ],
]))
const example_if_return = illustration('', code('JavaScript', ...[ // @todo L^0 language
    [ '', kw('function'), ' ', f('main'), '() {' ],
    [ '    ', f('if'), ' (', lt('true'), ', () => {' ],
    [ '        ', cm('// це був не той return...') ],
    [ '        ', kw('return'), ';' ],
    [ '    })' ],
    [ '}' ],
]))
const example_if_index = illustration('', code('JavaScript', ...[ // @todo L^0 language
    [ kw('function'), ' ', f('if'), '(', v('condition'), ', ', v('body'), ') {' ],
    [ '    [ () => {}, ', f('body'), ' ][', lt('0'), ' + ', v('condition'), ']();' ],
    [ '}' ],
    [ '' ],
    [ f('if'), ' (', lt('true'), ', () => ', v('console'), '.', f('log'), '(', lt('"lol"'), '));' ],
]))

export default  article(sentence('Мова програмування ', l0, '. '), ...[
    section(sentence('Що таке ', l0, '? '), ...[
        paragraph(...[
            sentence(l0, ' - це мініатюрна мова програмування. '),
            sentence('Хоча ніхто не забороняє писати на ній повсякденні прикладні програми, це все ж може виявитись непомірно важкою роботою, адже ', l0, ' зовсім ', emp('не призначена'), ' для цього. '),
            sentence('Але разом з цим вона також не є жартом чи доведенням до абсурду, на відміну від, наприклад, багатьох ', link('езотеричних мов', esoteric), '. '),
            sentence('Тому в намаганні зрозуміти її марно покладатись на досвід, отриманий в роботі зі звичними мовами, адже основне призначення ', l0, ' - це не написання програм, а виявлення і дослідження меж застосовності штучних мов. '),
        ]),
        paragraph(...[
            sentence('У ', l0, ' немає жодної кінцевої мети, ', neg('лише шлях'), '. '),
            sentence('Причиною її створення були питання, але ', l0, ' не має на меті відповідати на них. '),
            sentence('Ця мова існує виключно тому, що без її існування досліджуваний з її допомогою предмет вислизає з поля зору. '),
            sentence('І це чиста правда, тому що до створення ', l0, ' я не лише не мав жодних припущень щодо можливих відповідей, а навіть не уявляв які питання потрібно ставити. '),
            sentence('Але аби пояснити що саме я маю на увазі і навіщо таки була написана ця мова мені доведеться привести кілька прикладів і ввести вас в курс справи. '),
            sentence('А до того часу навіть не намагайтесь думати про ', l0, ' як про звичайну мову програмування. '),
            sentence('Просто забудьте про це! '),
        ]),
    ]),
    section('Мовна різниця. ', ...[
        paragraph(...[
            sentence('Сьогодні існує дуже багато мов і всі вони дуже різні. '),
            sentence('Але не зважаючи на це у них є і багато схожих рис. '),
            sentence('Наскільки багато - залежить від того, що саме ми маємо на увазі коли говоримо про ', fig('схожість'), '. '),
            sentence('Наприклад, майже у всіх мовах ми можемо виконувати галуження і цикли, викликати функції і записувати вирази у зручній формі ', js([ v('a'), ' + ', v('b') ]), '. '),
            sentence('На противагу цьому деякі мови мають статичну типізацію а деякі - динамічну, одні підтримують множинне наслідування а інші - ні. '),
            sentence('Десь можливе перевантаження функцій чи операторів, десь підтримуються шаблони, десь співпрограми та асинхронний код і т.і. '),
            sentence('Чи можемо ми проводити різницю між мовами які відрізняються зовсім трохи? '),
            sentence('Якщо відмінності мізерні то чи є якийсь сенс в існуванні межі і чи може вона бути чіткою? '),
        ]),
        paragraph(...[
            sentence('Аби пояснити моє ставлення до цього я хотів би привести декілька прикладів. '),
            sentence('Перший з них стосується мови C# та однієї особливої форми запису в ній - linq. '),
            sentence('Вона призначена для роботи з колекціями і є синтаксичним цукром який загалом зводиться до простої заміни тексту програми (див. ', example_linq, '). '),
            sentence('Наприклад, маючи список статей ', cs(v('articles')), ' ми можемо отримати список авторів кожної статті. '),
            sentence('Для цього нам потрібно виконати linq запит ', cs([ kw('from'), ' ', v('article'), ' ', kw('in'), ' ', v('articles'), ' ', kw('select'), ' ', v('article'), '.', v('author') ]), '. '),
            sentence('В ході компіляції цей запит буде перетворений на звичайний код ', cs([ v('articles'), '.', f('Select'), '(', v('article'), ' => ', v('article'), '.', v('author'), ')' ]), ', і від особливої форми запису не залишиться жодного сліду. '),
        ]),
        example_linq,
        paragraph(...[
            sentence('У виграші тут усі: і користувачі, оскільки в них є зручна форма запису, і розробники мови, оскільки не потрібно вносити особливі конструкції в ядро мови. '),
            sentence('Взагалі, ніхто не забороняє з самого початку використовувати методи замість запитів, що робить linq швидше надбудовою ніж фундаментальною особливістю. '),
            sentence('Але цікаво, чи перестане C# бути C#, якщо з нього викинути linq? '),
            sentence('З одного боку - так, тому що це все ж частина мови. '),
            sentence('Але з іншого боку це зовсім не одне і те ж, якби з мови видалили конструкцію ', cs(kw('if')), ' або можливість оголошувати функції. '),
        ]),
        paragraph(...[
            sentence('Дуже схожа ситуація склалась з мовою JSX, яка дає можливість запису HTML/XML-подібних теґів всередині звичайного JavaScript коду (див. ', example_jsx, '). '),
            sentence('Як і у випадку з linq все зводиться до простої заміни тексту. '),
            sentence('Наприклад, вираз ', jsx([ '<', kw('span'), ' ', v('className'), '=', lt('"red"'), '>red text</', kw('span'), '>' ]), ' буде замінено на ', js([ c('React'), '.', f('createElement'), '(', lt('"span"'), ', { ', v('className'), ' : ', lt('"red"'), ' }, ', lt('"red text"'), ')' ]), '. '),
            sentence('Тобто JSX це теж лише зручна форма запису але аж ніяк не новий функціонал. '),
        ]),
        example_jsx,
        paragraph(...[
            sentence('Але наскільки далеко можна зайти з таким підходом? '),
            sentence('Можливо, достатньо далеко, якщо ви пишете на JavaScript. '),
            sentence('Співпрограми в цій мові є лише синтаксичним цукром: виклик ', js(kw(`yield`)), ' насправді зводиться до повернення об\'єкта з лічильником всередині (див. ', example_yield, '). '),
            sentence('Асинхронність тут теж примарна, тому що усі вирази на кшталт ', js([ kw('let'), ' ', v('x'), ' = ', kw('await'), ' ', f('f'), '()' ]), ' перетворюються на ', js([ f('f'), '().', f('then'), '(', v('x'), ' => { ... })' ]), '. '),
            sentence('Що залишиться з цієї мови, якщо прибрати з неї весь цукор, зробити ', fig('дієтичною'), '? '),
            sentence('Рано чи пізно ми дістанемось найбільш фундаментальних конструкції - об\'єктів (', js('{}'), '), масивів (', js('[]'), ') та індексації (', js([ v('a'), '.', v('b') ]), '). '),
            sentence('Останню можна звести до ', js([ v('a'), '[', lt('"b"'), ']' ]), ', але як бути далі? '),
            sentence('Можливо, є сенс ввести спеціальні функції і звести цей функціонал до їх виклику. '),
            sentence('Навіть якщо так, що тоді робити з функціями? '),
            sentence('Чи можна скоротити їх? '),
        ]),
        example_yield,
        paragraph(...[
            sentence('Можна піти й протилежним шляхом і спробувати збагатити мову новими формами запису. '),
            sentence('Зовсім не обов\'язково аби ці форми виходили за межі самої мови. '),
            sentence('Наприклад, ми можемо спробувати додати в динамічно типізовану мову деяку форму статичної типізації, записуючи обмеження що накладаються на типи в спеціально форматованих коментарях (див. ', example_jsdoc, '). '),
            sentence('Хоча ці коментарі не мають значення для JavaScript, з їх допомогою можна перетворити код і додати в нього автоматичні перевірки (див. ', example_assert, ') або навіть проводити статичний аналіз. '),
            sentence('Після всього сказаного, чи можна вважати це кодом JavaScript? '),
        ]),
        example_jsdoc,
        example_assert,
    ]),
    section('Шлях в ніщо. ', ...[
        paragraph(...[
            sentence('Озвучені раніше питання дуже турбували мене. '),
            sentence('Мені було цікаво чи існує якась межа, після якої спрощення мови буде неможливим. '),
            sentence('Чи зведуться дві різні мови в процесі спрощення до однієї? '),
            sentence('Чи існують важливі частини мови які можна винести за її межі і перетворити на зовнішні бібліотеки? '),
            sentence('Як неможливо навчитись плавати в басейні без води, так і я не міг відповісти на ці питання без пісочниці для експериментів. '),
            sentence('Тому мені здалось, що найкращим виходом буде спробувати створити ', l0, ': дуже просту мову, яку можна було б розвинути до належного рівня без втручання в її ядро. '),
        ]),
        paragraph(...[
            sentence('Для початку я вирішив позбутись тих форм запису, які можна відносно легко відтворити за допомогою перетворення тексту. '),
            sentence('Першими такими кандидатами стали вже названі linq та JSX. '),
            sentence('Не щоб я відштовхувався від якоїсь конкретної ', fig('початкової'), ' мови, просто визначився з набором особливостей які не варто вносити в ядро, адже їх можна додати ', fig('ззовні'), ' мови. '),
            sentence('Також в чорний список потрапили співпрограми, ', js(kw('async')), '/', js(kw('await')), ', перевантаження функцій, оператори ', js('+'), ', ', js('-'), ', ', js('*'), ', ', js('/'), ' та інші. '),
            sentence('Отож, якщо ви хочете працювати з асинхронним кодом - доведеться явно передавати функції в якості аргументів, а якщо хочете записати вираз ', js([ v('a'), ' + ', v('b') ]), ' то будете змушені робити це через виклик функції ', js([ f('add'), '(', v('a'), ', ', v('b'), ')' ]), '. '),
        ]),
        paragraph(...[
            sentence('Чого ще можна позбутись? '),
            sentence('Можливо для багатьох це буде виглядати дико, але наступною з мови зникла статична типізація та й взагалі вся система типів. '),
            sentence('Я і сам спочатку був не в захваті від цієї ідеї, але тепер я можу пояснити чому був зроблений такий вибір. '),
            sentence('По-перше, статичної типізації можна досягнути засобами статичного аналізу, як було показано вище. '),
            sentence('Це тема окремої розмови, але якщо спрощувати, то якщо людина дивлячись на не типізований код може однозначно сказати правильний він чи ні - отже цю роботу може виконати алгоритм. '),
            sentence('Якщо цей алгоритм сторонній і не є частиною мови, то вам не доведеться чекати на нову версію мови, щоб отримати нові можливості - ви просто можете розширити цей сторонній алгоритм. '),
            sentence('Зрештою, деякі статично типізовані мови через обмеження своїх систем типів користуються зовнішніми статичними аналізаторами коду. '),
            sentence('Якщо такі аналізатори вже існують, то який сенс додавати якусь їх обмежену частину в ядро мови? '),
            sentence('Чи не буде простіше і надійніше повністю винести засоби контролю типів за межі мови? '),
        ]),
        paragraph(...[
            sentence('По-друге, ніхто насправді не знає якою повинна бути хороша система типів. '),
            sentence('Чи повинне підтримуватись наслідування і якщо так, то чи допускається множинне? '),
            sentence('Як повинне відбуватись приведення типів? '),
            sentence('Чи може тип змінюватись з часом та і взагалі як він пов\'язаний з життєвим циклом об\'єктів (якщо такий взагалі є)? '),
            sentence('На ці питання, можливо, навіть немає правильної відповіді. '),
            sentence('А враховуючи ще й те, що жодна знайома мені система типів не влаштовує мене в повній мірі, я не бачу сенсу включати якусь з них в ядро мови. '),
            sentence('Тому в ', l0, ' немає контролю типів, але є плани як цей контроль можна внести в майбутньому. '),
        ]),
    ]),
    section('Точка неповернення. ', ...[
        paragraph(...[
            sentence('Отож, чи можна продовжити рухатись далі? '),
            sentence('Виходячи з нашого чорного списку ми отримали мову, яка здебільшого складається з оголошень та викликів функцій, літералів та дуже примітивних базових операцій типу галужень та циклів. '),
            sentence('Комусь може здатись що це той мінімум, нижче якого вже не опуститись, але це не так. '),
            sentence('Мені здається, ми можемо позбутись майже усього з наведеного вище або принаймні винести цей функціонал за межі ядра мови. '),
            sentence('І зараз я поясню як. '),
        ]),
        paragraph(...[
            sentence('Пропоную почати з циклів: ', js(kw('for')), ', ', js(kw('while')), ', ', cs(kw('foreach')), ' та інших. '),
            sentence('Думаю очевидно, що усіх їх можна звести до одного циклу - ', js(kw('while'), '(', lt('true'), ')'), ' - всередині якого решта функціоналу імітується через оператори ', js(kw('if')), ' та ', js(kw('break')), '. '),
            sentence('Що ж стосується самого ', js(kw('while')), ', то його можна замінити на рекурсію та вихід з функції в якості ', js(kw('break')), '(див. ', example_while, '). '),
            sentence('Щоправда, на цьому етапі виникає серйозна проблема - переповнення стеку - яка не дасть нам повторювати цикли достатньо довго. '),
            sentence('Це серйозна вада і деякі мови вирішують її через, наприклад, оптимізацію хвостової рекурсії. '),
            sentence('Внесення такої оптимізації в ядро є небажаним, тому ми будемо рухатись іншим шляхом. '),
            sentence('Яким саме - стане зрозуміло пізніше, після решти спрощень. '),
            sentence('А до того часу просто слід пам\'ятати, що нам потрібно навчитись боротись з переповненням стеку. '),
        ]),
        example_while,
        paragraph(...[
            sentence('Тепер можна взятись за логічні оператори: ', js('!'), ', ', js('&&'), ' та ', js('||'), '. '),
            sentence('З запереченням особливих проблем немає, його можна легко реалізувати як ', js([ kw('if'), '(', v('value'), ') ', kw('return'), ' ', lt('false'), '; ', kw('return'), ' ', lt('true') ]), '. '),
            sentence('З кон\'юнкцією та диз\'юнкцією ситуація складніша, адже вони можуть не виконувати праву частину виразу в залежності від значення лівої. '),
            sentence('Але і це можна обійти якщо передавати не самі вирази а функції, що будуть їх обчислювати (див. ', example_logic, '). '),
            sentence('Правда тепер виявляється, що ми непомітно опирались на одну дуже вагому особливість деяких мов - замикання. '),
            sentence('Як і у випадку з циклами, наші замінники логічних операцій записуються відносно легко лише через те, що ми дозволяємо собі передавати в якості аргументів функції, що захоплюють локальні змінні. '),
            sentence('Разом з переповненням стеку це вже другий боржок за який нам потрібно було б колись розрахуватись. '),
        ]),
        example_logic,
        paragraph(...[
            sentence('Настав час звести рахунки з парою найскладніших ворогів нашого шляху спрощення: ', js(kw('if')), ' та ', js(kw('return')), '. '),
            sentence('Ми будемо розглядати їх в парі тому, що якщо ми реалізуємо ', js(kw('if')), ' за тим же принципом що і ', js('&&'), ' та ', js('||'), ' то втратимо можливість викликати всередині його блоку ', js(kw('return')), ' (див. ', example_if_return, '). '),
            sentence('І на це є вагома причина, адже ', js(kw('return')), ' унікальний для кожної функції. '),
            sentence('Якщо ми будемо передавати функції в якості аргументів то у них будуть свої власні ', js(kw('return')), 'и. '),
            sentence('Ця проблема - неможливість ділитись  ', js(kw('return')), 'ами - зовсім не нова і часто заважає тоді, коли, наприклад, хочемо повернутись з зовнішньої функції всередині лямбди переданої в ', js([ c('Array'), '.', v('prototype'), '.', f('forEach') ]), '. '),
            sentence('Частково вона пов\'язана і з перекриттям: якщо мати доступ до обох ', js(kw('return')), 'ів, то як - за яким іменем - звертатись до зовнішнього? '),
        ]),
        example_if_return,
        paragraph(...[
            sentence('Але це ще не все. '),
            sentence('Навіть якщо ми зможемо звертатись до зовнішнього ', js(kw('return')), ' нам все одно немає чим замінити ', js(kw('if')), '. '),
            sentence('Він, в певній мірі, незамінний. '),
            sentence('Можна було б, наприклад, спробувати викликати функцію за індексом (див. ', example_if_index, ') але це принципово нічого не змінило б: замість підтримки ', js(kw('if')), ' доведеться підтримувати масиви та індексацію. '),
            sentence('Це суперечить нашій меті - винести якомога більше функціоналу з ядра мови. '),
            sentence('З іншого боку можливо це і добре: якщо існуватиме бібліотека що надає функціонал для індексації то відпадає потреба в реалізації ', js(kw('if')), '. '),
        ]),
        example_if_index,
        paragraph(...[
            sentence('В будь якому випадку ми підійшли до того рубежу, який окреслює межі застосовності нинішнього стандартного підходу: використання функції, стеку та правил роботи з іменами. '),
            sentence('Якщо хочемо рухатись далі - потрібно відкинути його. '),
            sentence('Всі наші подальші кроки вже не будуть простим скороченням функціоналу мови задля пошуку спільних рис. '),
            sentence('Тепер це пошук підходів, які змогли б розширити нинішні концепції і принести в них щось нове. '),
        ]),
    ]),
    section(fig('Без назви.'), ...[
        paragraph(...[
            sentence('Отож, якщо опиратись на наявні підходи рух далі стає неможливим. '),
            sentence('Потрібні нові ідеї, нові погляди на речі. '),
            sentence('Існує безліч способів зробити це, але в плані роботи над ', l0, ' я вирішив дослідити саме той шлях, про який і піде мова. '),
            sentence('Перша з ідей цього шляху - це абстрагування від багатьох концепцій, що відомі нам з сучасних мов. '),
            sentence('Сюди входять літерали на кшталт ', js(lt('true')), ', ', js(lt('123')), ' та ', js(lt('"ololo"')), ', стандартні арифметичні операції ', js('+'), ', ', js('-'), ' і т.і., галуження, цикли, робота з масивами, стрічками та й взагалі звичними для нас контейнерами. '),
            sentence('Це не означає, наприклад, що в ', l0, ' буде неможливо додати два числа. '),
            sentence('Але це означає, що ', l0, ' не має на меті включати цей функціонал в своє ядро. '),
            sentence('Додавання чисел, якби це не прозвучало, є лише обмеженою предметною областю знань. '),
            sentence('Є сенс надати можливість користуватись цією предметною областю, але в той же час залишатись осторонь, не даючи їй вкорінитись в серці мови. '),
        ]),
        paragraph(...[
            sentence(''),
            sentence(''),
            sentence(''),
        ]),
        paragraph(...[
            sentence(''),
            sentence(''),
            sentence(''),
        ]),
    ]),
    section('', ...[
        paragraph(...[
            sentence(''),
        ]),
    ]),
])
