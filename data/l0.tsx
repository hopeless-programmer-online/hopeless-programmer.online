import React from 'react'
import { article, c, cm, code, cs, emp, f, fig, illustration, js, jsx, kw, link, lt, neg, note, paragraph, py, quote, section, sentence, v, l0, cpp } from '../classes/shortcuts'

const drawbacks = note(...[
    sentence(`Аби не роздувати цю частину статті текстом який і так не переконає незгодних я одразу зауважу: усі `, fig(`недоліки`), ` про які піде мова далі є суб\`єктивними. `),
    sentence(`Якщо ви не вважаєте котрийсь з них недоліком - добре бути вами. `),
])
const terms = note(sentence(`Оскільки ці назви не є загальноприйнятими майте на увазі, що вони мають сенс лише в межах цієї статті. `))

class L0 extends React.Component {
    public render() {
        return (
            <i style={{ fontWeight : `bold`, color : `crimson`, fontFamily : `Helvetica` }}>L<sup>0</sup></i>
        )
    }
}

export default  article(sentence(`Мова програмування `, L0, `. `), {}, ...[
    section(sentence(`Що таке `, L0, `? `), ...[
        paragraph(...[
            sentence(L0, ` - це мініатюрна мова програмування створена мною в дослідницьких цілях. `),
            sentence(`Писати програми на ній незвично, важко і вкрай незручно, але на це є вагома причина. `),
            sentence(`Вся справа в тому, що, як би абсурдно це не звучало, `, L0, ` не розроблялась для написання програм. `),
            sentence(`Спочатку таке твердження може здатись дуже дивним, але я сподіваюсь до кінця цієї статті я все ж зможу його обґрунтувати. `),
            sentence(`А до того просто майте на увазі, що якщо вам раптом почне здаватись що `, L0, ` не придатна для написання програм - знайте, вам не здається. `),
        ]),
        illustration('', l0(...[
            [ f(`print`), `(`, lt(`"hello, world!"`), `)` ],
        ]))
    ]),
    section(sentence(`Проблемс? `), ...[
        paragraph(...[
            sentence(`Передумовами створення `, L0, ` були `, fig(`недоліки`), drawbacks, ` та `, fig(`обмеження`), ` сучасних мов. `),
            sentence(`Деякі з них дістали мене настільки сильно, що я вирішив включити засоби їх вирішення в мову просто в якості прикладу доведення концепції. `),
            sentence(`Але основним поштовхом до створення були два основні обмеження, які здавались мені сильно пов'язаними між собою: обмеження форми запису та обмеження моделі виконання`, terms, `. `),
            sentence(`Тут потрібні деякі пояснення стосовно того що саме я маю на увазі. `),
        ]),
        paragraph(...[
            sentence(`Здебільшого під час роботи з конкретною мовою ми сильно обмежені в формі запису. `),
            sentence(`Наприклад, ми не можемо використовувати теґи HTML всередині JavaScript, SQL запити всередині С++ або шаблонні стрічки всередині С. `),
            sentence(`Тому, оскільки більшість мов не дають змогу розширити свій синтаксис, найчастіше найкраще що ми можемо зробити це або привести такі форми запису до вигляду який підтримується в мові, або перейти на іншу мову яка їх дозволяє. `),
        ]),
        paragraph(...[
            sentence(`Перехід на іншу мову це дуже, дуже погано. `),
            sentence(`Зазвичай такі переходи потребують повторного переписування великої кількості коду що може використовуватись як аргумент для їх відтягування. `),
            sentence(`Відтягування, в свою чергу, призводить до зростання ціни переходу і породжує неприємну ситуацію: з кожним днем нових можливостей стає все більше а перехід стає все дорожчим. `),
            sentence(`Весь цей час люди і продукт страждають. `),
            sentence(`Приведення форм це теж страждання: згадайте JavaScript без `, js([ kw(`async`), `/`, kw(`await`) ]), ` або уявіть C# без `, cs(kw(`linq`)), `. `),
            sentence(`Отож бо й воно. `),
        ]),
        paragraph(...[
            sentence(`Друге обмеження пов'язане з тим як написаний код виконується: буквально, як його розуміє транслятор. `),
            sentence(`Зазвичай це `, fig(`розуміння`), ` цвяхами прибите до самого транслятора без можливості будь якого розширення. `),
            sentence(`Наприклад, деякі мови не вміють скорочувати хвостову рекурсію або зайві копіювання, оптимізувати множення матриць або виконувати статичні перевірки які виходять за межі їх моделей типів. `),
            sentence(`Це сильно впливає на те як виглядає код та яку роботу він може виконувати в принципі. `),
        ]),
        paragraph(...[
            sentence(`Якщо у мові немає засобів для контролю типів або ці засоби обмежені - доводиться лише сподіватись, що динамічні перевірки (якщо такі взагалі є) знайдуть невідповідність. `),
            sentence(`Якщо у мові немає засобів для автоматизованої оптимізації - доводиться або покладатись на вбудований оптимізатор, або виконувати роботу за нього, `, fig(`вручну`), `. `),
            sentence(`Якщо у мові немає засобів генерації коду... `),
            sentence(`Думаю зрозуміло до чого я веду. `),
        ]),
        paragraph(...[
            sentence(`В сумі це може мати дуже сумні наслідки. `),
            sentence(`Весь проект не переїде на нову версію Visual Studio лише через підтримку `, cpp(kw(`foreach`)), ` в новому стандарті. `),
            sentence(`З іншої сторони проекту може бути не вигідно чекати доки в черговій версії Node.js з'явиться офіційна підтримка `, js(c(`Promise`)), ` та `, js([ kw(`async`), `/`, kw(`await`) ]), `, код потрібно писати уже сьогодні. `),
            sentence(`Навіть якщо програміст сам може написати код потрібний для певного синтаксичного цукру, типізації або оптимізації він навряд чи зможе швидко проштовхнути його в комітет стандартизації тої чи іншої мови. `),
            sentence(``),
        ]),
    ]),
    section(`Мета. `, ...[
        paragraph(...[
            sentence(``),
            sentence(``),
            sentence(``),
            sentence(``),
            sentence(``),
        ]),
        paragraph(...[
            sentence(``),
            sentence(``),
        ]),
        paragraph(...[
            sentence(``),
            sentence(``),
        ]),
    ]),
    section(``, ...[
        paragraph(...[
            sentence(``),
        ]),
    ]),
])
