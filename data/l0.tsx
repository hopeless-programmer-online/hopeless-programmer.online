import React from 'react'
import { article, c, cm, code, cs, emp, f, fig, illustration, js, jsx, kw, link, lt, neg, note, paragraph, py, quote, section, sentence, v, l0, cpp, lts, comparison } from '../classes/shortcuts'

const cps = `https://en.wikipedia.org/wiki/Continuation-passing_style`
const callback = `https://uk.wikipedia.org/wiki/Callback_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`
const sugar = `https://uk.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%BD%D0%B8%D0%B9_%D1%86%D1%83%D0%BA%D0%BE%D1%80`
const closure = `https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`
const first_class = `https://uk.wikipedia.org/wiki/%D0%9E%D0%B1%27%D1%94%D0%BA%D1%82_%D0%BF%D0%B5%D1%80%D1%88%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%83`

class L0 extends React.Component {
    public render() {
        return (
            <i style={{ fontWeight : `bold`, color : `crimson`, fontFamily : `Helvetica` }}>L<sup>0</sup></i>
        )
    }
}

const example_1 = illustration(``, l0(...[
    [ cm(`; оголошення програми "my program" яка приймає`) ],
    [ cm(`; значення x, y, z та повертає їх у зворотному порядку`) ],
    [ ``, f(`my program`), ` (`, v(`x`), `, `, v(`y`), `, `, v(`z`), `) {` ],
    [ `    `, cm(`; виклик програми "super" (аналог return)`) ],
    [ `    `, kw(`super`), `(`, v(`x`), `, `, v(`y`), `, `, v(`z`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; виклик програми "my program"`) ],
    [ cm(`; та отримання результатів u, v, w`) ],
    [ ``, v(`u`), `, `, v(`v`), `, `, v(`w`), ` : `, f(`my program`), `()` ],
]))
const example_2 = illustration(``, comparison(
    l0(...[
        [ cm(`; продовження отримується неявно`) ],
        [ ``, f(`f`), ` () {` ],
        [ `    `, kw(`super`), `(1)` ],
        [ `}` ],
        [ `` ],
        [ cm(`; продовження формується та`) ],
        [ cm(`; передається неявно`) ],
        [ v(`x`), ` : `, f(`f`), `()` ],
        [ `` ],
        [ ``, f(`print`), `(`, v(`x`), `)` ],
    ]),
    l0(...[
        [ cm(`; продовження отримується явно`) ],
        [ ``, f(`f`), ` (`, f(`super`), `) {` ],
        [ `    `, f(`super`), `(`, lt(`1`), `)` ],
        [ `}` ],
        [ `` ],
        [ cm(`; формування продовження`) ],
        [ ``, f(`then`), ` (`, v(`x`), `) {` ],
        [ `    `, cm(`; отримання значень`) ],
        [ `    `, cm(`; переданих в super`) ],
        [ `    `, f(`print`), `(`, v(`x`), `)` ],
        [ `}` ],
        [ `` ],
        [ cm(`; явна передача продовження then`) ],
        [ ``, f(`f`), `(`, f(`then`), `)` ],
    ]),
))
const example_3 = illustration(``, comparison(
    l0(...[
        [ cm(`; зовнішня програма`) ],
        [ ``, f(`f`), ` (`, v(`x`), `, `, v(`y`), `) {` ],
        [ `    `, cm(`; внутрішня програма`) ],
        [ `    `, f(`g`), `(`, v(`u`), `, `, v(`v`), `) {` ],
        [ `    }` ],
        [ `}` ],
    ]),
    l0(...[
        [ cm(`; неявні параметри:`) ],
        [ cm(`; f, super`) ],
        [ cm(`; явні параметри:`) ],
        [ cm(`; x, y`) ],
        [ ``, f(`f`), ` (`, f(`f`), `, `, kw(`super`), `, `, v(`x`), `, `, v(`y`), `) {` ],
        [ `}` ],
        [ `` ],
        [ cm(`; неявні параметри:`) ],
        [ cm(`; f, super, x, y, g, super`) ],
        [ cm(`; явні параметри:`) ],
        [ cm(`; u, v`) ],
        [ ``, f(`g`), ` (`, f(`f`), `, `, kw(`super`), `, `, v(`x`), `, `, v(`y`), `, `, f(`g`), `, `, kw(`super`), `, `, v(`u`), `, `, v(`v`), `) {` ],
        [ `}` ],
    ]),
))
const example_4 = illustration(``, l0(...[
    [ cm(`; шаблон інструкції "f":`) ],
    [ cm(`; [ 0, 2, 1 ]`) ],
    [ cm(`; контроль буде передано змінній №0 - g`) ],
    [ cm(`; в якості аргументів виступатимуть`) ],
    [ cm(`; змінні №2 - y та №1 - x`) ],
    [ `f(g, x, y) {` ],
    [ `    g(y, x)` ],
    [ `}` ],
]))
const example_5 = illustration(``, l0(...[
    [ `f (super, x, y) {` ],
    [ `    then3 (z) {` ],
    [ `        `, cm(`; print виведе z після чого`) ],
    [ `        `, cm(`; передасть керування super`) ],
    [ `        print(super, z)` ],
    [ `    }` ],
    [ `    ` ],
    [ `    `, cm(`; add передасть керування then3, разом`) ],
    [ `    `, cm(`; з результатом операції додавання`) ],
    [ `    add(then3, x, y)` ],
    [ `}` ],
    [ `` ],
    [ `then () {` ],
    [ `    then2 () {` ],
    [ `        `, cm(`; тут програма завершиться`) ],
    [ `    }` ],
    [ `    `, cm(`; цей виклик f після свого виконання`) ],
    [ `    `, cm(`; передасть керування then2`) ],
    [ `    f(then2, 3, 4)` ],
    [ `}` ],
    [ ``, cm(`; після свого виконання f`) ],
    [ ``, cm(`; передасть керування then`) ],
    [ `f(then, 1, 2)` ],
]))
const example_6 = illustration(``, l0(...[
    [ `f(then, add, y, x) {` ],
    [ `    `, cm(`; наступний виклик можна записати як:`) ],
    [ `    `, cm(`; [ 1, 0, 3, 2 ]`) ],
    [ `    add(then, x, y)` ],
    [ `    `, cm(`; керування буде передано змінній №1 (add)`) ],
    [ `    `, cm(`; в якості аргументів будуть передані змінні`) ],
    [ `    `, cm(`; №0 (then), №3 (x) та №2 (y)`) ],
    [ `}` ],
]))

export default  article(sentence(`Мова програмування `, L0, `. `), {}, ...[
    section(sentence(`Що таке `, L0, `? `), ...[
        paragraph(...[
            sentence(L0, ` - це мініатюрна та дещо незвична мова програмування створена мною в дослідницьких цілях. `),
            sentence(`Вона складається з пари синтаксичних конструкцій, активно експлуатує ідею `, link(`передачі продовжень`, cps), ` та надає доступ до структури програми в часі виконання. `),
            sentence(`Це дозволяє `, L0, ` робити речі небачені для більшості інших мов, а саме здатність до контролю типів та оптимізації з використанням самих лише користувацьких бібліотек, без втручання в транслятор. `),
            sentence(`Але аби пояснити як саме це пов'язано та що це дає, для початку потрібно познайомитись з самою мовою. `),
        ]),
        illustration('', l0(...[
            [ f(`print`), `(`, lt(`"hello, world!"`), `)` ],
        ]))
    ]),
    section(`Програми та інструкції. `, ...[
        example_1,
        paragraph(...[
            sentence(`Функцій в `, L0, ` звуться програмами (див. `, example_1, `) і, на відміну від перших, ніколи не повертають назад ні значень, ні керування. `),
            sentence(`Натомість, перед викликом кожної програми весь наступний код загортається в окрему програму-продовження і передається в якості `, link(`функції зворотного виклику`, callback), ` (див. `, example_2, `). `),
            sentence(`Якщо цільова програма вирішить виконати `, js(kw(`return`)), ` їй не доведеться `, fig(`повертатись`), `, вона просто передасть керування в продовження. `),
            sentence(`Це одна з ключових ідей в розумінні `, L0, `: звичні нам виклики функцій тут виступають лише в ролі `, link(`синтаксичного цукру`, sugar), `. `),
            sentence(`Насправді ж весь процес виконання виглядатиме як дуже довгий ланцюжок передачі керування від одного продовження до іншого. `),
        ]),
        example_2,
        paragraph(...[
            sentence(`Наступним важливим моментом `, L0, ` є реалізація `, link(`замикань`, closure), `. `),
            sentence(`При оголошенні програми вона `, fig(`захоплює`), ` усі змінні оголошені до неї і зберігає їх у своєрідне `, fig(`сховище`), `. `),
            sentence(`Під час виклику це сховище розгортається і об'єднується зі щойно переданими аргументами, формуючи `, fig(`повний набір параметрів`), `. `),
            sentence(`Тому, навіть якщо ми не записуємо це явно, в дійсності кожна програма приймає `, emp(`всі`), ` змінні оголошені до неї (див. `, example_3, `), а не лише аргументи. `),
        ]),
        example_3,
        paragraph(...[
            sentence(`Отож усі програми `, L0, ` насправді складаються з великої кількості окремих ланок - `, fig(`інструкцій`), `. `),
            sentence(`Кожна з них отримує до опрацювання повний набір параметрів, в якому знаходяться як наступна інструкція, так і потрібні для її роботи аргументи. `),
            sentence(`Щойно їх список сформований керування передається далі і цикл повторюється. `),
        ]),
        paragraph(...[
            sentence(`Формування нового списку аргументів це дуже проста операція: достатньо просто знайти змінну в поточному списку і скопіювати її в новий. `),
            sentence(`Для цього кожна інструкція має `, fig(`шаблон`), ` - набір індексів, який зіставляє ці два списки (див. `, example_4, `). `),
            sentence(`По суті це звичайний масив чисел, де номер кожного елементу відповідає номеру в новому списку аргументів, а значення - номеру в поточному списку. `),
        ]),
        example_4,
        paragraph(...[
            sentence(`Останнє що варто знати про `, L0, ` так це те, що оголошення програми в ній насправді теж є викликом, а саме - викликом `, fig(`програми зв'язування`), `. `),
            sentence(`Ця програма приймає в якості аргументів два шаблони: шаблон програми, що оголошується та шаблон програми, яка отримає в якості аргументу першу, вже оголошену програму. `),
            sentence(`Після виклику програма зв'язування сформує на основі шаблонів дві інструкції - для оголошуваної програми та для продовження - а також наповнить їхні сховища рештою аргументів. `),
        ]),
    ]),
    section(``, ...[
        paragraph(...[
            sentence(``),
        ]),
    ]),
])
