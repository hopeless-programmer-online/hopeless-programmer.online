import React from 'react'
import { article, c, cm, code, cs, emp, f, fig, illustration, js, jsx, kw, link, lt, neg, note, paragraph, py, quote, section, sentence, v, l0, cpp, lts } from '../classes/shortcuts'

const cps = `https://en.wikipedia.org/wiki/Continuation-passing_style`
const closure = `https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`
const callback = `https://uk.wikipedia.org/wiki/Callback_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`

class L0 extends React.Component {
    public render() {
        return (
            <i style={{ fontWeight : `bold`, color : `crimson`, fontFamily : `Helvetica` }}>L<sup>0</sup></i>
        )
    }
}

const example_1 = illustration(``, l0(...[
    [ cm(`; оголошення програми`) ],
    [ f(`my program`), ` (`, v(`x`), `, `, v(`y`), `, `, v(`z`), `) {` ],
    [ `    `, cm(`; повернення з програми`) ],
    [ `    `, kw(`super`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; виклик програми`) ],
    [ v(`u`), `, `, v(`v`), `, `, v(`w`), ` : `, f(`my program`), `(`, lt(`4`), `, `, lt(`5`), `, `, lt(`6`), `)` ],
    [ `` ],
    [ cm(`; друк результатів`) ],
    [ f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
]))
const example_2 = illustration(``, l0(...[
    [ ``, f(`f`), ` () {` ],
    [ `    `, kw(`super`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; неявна передача продовження`) ],
    [ ``, v(`u`), `, `, v(`v`), `, `, v(`w`), ` : `, f(`f`), `()` ],
    [ `` ],
    [ ``, f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
    [ `` ],
    [ ``, f(`g`), ` (`, f(`then`), `) {` ],
    [ `    `, f(`then`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ cm(`; програма-продовження`) ],
    [ ``, f(`then`), ` (`, v(`u`), `, `, v(`v`), `, `, v(`w`), `) {` ],
    [ `    `, f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; явна передача продовження`) ],
    [ ``, f(`g`), `(`, f(`then`), `)` ],
]))
const example_3 = illustration(``, l0(...[
    [ `outer () {` ],
    [ `    inner () {` ],
    [ `        ; вихід з outer()` ],
    [ `        /super()` ],
    [ `    }` ],
    [ `    ` ],
    [ `    ; виклик inner` ],
    [ `    inner()` ],
    [ `}` ],
]))
const example_4 = illustration(``, l0(...[
    [ `f(x, y) {` ],
    [ `    z : add(x, y)` ],
    [ `    ` ],
    [ `    print(z)` ],
    [ `}` ],
    [ `` ],
    [ `f(1, 2)` ],
    [ `f(3, 4)` ],
]))
const example_5 = illustration(``, l0(...[
    [ `f (super, x, y) {` ],
    [ `    then3 (z) {` ],
    [ `        `, cm(`; print виведе z після чого`) ],
    [ `        `, cm(`; передасть керування super`) ],
    [ `        print(super, z)` ],
    [ `    }` ],
    [ `    ` ],
    [ `    `, cm(`; add передасть керування then3, разом`) ],
    [ `    `, cm(`; з результатом операції додавання`) ],
    [ `    add(then3, x, y)` ],
    [ `}` ],
    [ `` ],
    [ `then () {` ],
    [ `    then2 () {` ],
    [ `        `, cm(`; тут програма завершиться`) ],
    [ `    }` ],
    [ `    `, cm(`; цей виклик f після свого виконання`) ],
    [ `    `, cm(`; передасть керування then2`) ],
    [ `    f(then2, 3, 4)` ],
    [ `}` ],
    [ ``, cm(`; після свого виконання f`) ],
    [ ``, cm(`; передасть керування then`) ],
    [ `f(then, 1, 2)` ],
]))
const example_6 = illustration(``, l0(...[
    [ `f(then, add, y, x) {` ],
    [ `    `, cm(`; наступний виклик можна записати як:`) ],
    [ `    `, cm(`; [ 1, 0, 3, 2 ]`) ],
    [ `    add(then, x, y)` ],
    [ `    `, cm(`; керування буде передано змінній №1 (add)`) ],
    [ `    `, cm(`; в якості аргументів будуть передані змінні`) ],
    [ `    `, cm(`; №0 (then), №3 (x) та №2 (y)`) ],
    [ `}` ],
]))

export default  article(sentence(`Мова програмування `, L0, `. `), {}, ...[
    section(sentence(`Що таке `, L0, `? `), ...[
        paragraph(...[
            sentence(L0, ` - це мініатюрна мова програмування створена мною в дослідницьких цілях. `),
            sentence(`Основною метою було дослідження меж застосовності користувацьких бібліотек. `),
            sentence(`Зокрема, чи можливо проводити з їх допомогою автоматизовану оптимізацію, кодогенерацію та статичний аналіз, без втручання в транслятор. `),
            sentence(`Спойлер: можливо. `),
            sentence(`Але оскільки ці механізми сильно переплетені з внутрішнім устроєм самої мови спочатку є сенс, власне, познайомитись з нею. `),
        ]),
        illustration('', l0(...[
            [ f(`print`), `(`, lt(`"hello, world!"`), `)` ],
        ]))
    ]),
    section(`Швидкий старт. `, ...[
        paragraph(...[
            sentence(`Коли я говорив що `, L0, ` мініатюрна я справді мав це на увазі. `),
            sentence(`Мова складається лише з двох конструкцій: оголошення програм та їх виклику (див. `, example_1, `). `),
            sentence(`Програми в `, L0, ` дуже схожі на функції але не повертають значення. `),
            sentence(`Натомість вони працюють за принципом `, link(`передачі продовжень`, cps), `: виклик програми це по суті повна передача керування в неї. `),
            sentence(`При цьому весь наступний після виклику код загортається в окрему програму і передається в якості неявного аргументу `, l0(kw(`super`)), `(див. `, example_2, `). `),
            sentence(`Роботу `, l0(kw(`super`)), ` можна трактувати як `, js(kw(`return`)), `, але замість повернення з поточної програми він просто викликає іншу. `),
        ]),
        example_1,
        example_2,
        paragraph(...[
            sentence(`Програми в `, L0, ` є об'єктами першого класу. `),
            sentence(`А оскільки `, l0(kw(`super`)), ` теж є програмою, це дозволяє виконувати небачені для багатьох інших мов речі. `),
            sentence(`Наприклад, можна виконати вихід з зовнішньої функції ( див.`, example_3, `), виконати вихід двічі або навіть повернутись до місця де був викликаний `, l0(kw(`super`)), ` і продовжити виконання. `),
            sentence(`Також `, L0, ` підтримує `, link(`замикання`, closure), `, тобто кожна програма зв'язується з усіма змінними що були оголошені до неї. `),
            sentence(`А от чого в мові немає так це складних виразів. `),
            sentence(`Якщо потрібно передати в програму суму двох чисел, то це потрібно зробити до виклику, помістити результат в змінну і передати в програму її. `),
        ]),
        example_3,
    ]),
    section(`Інструкції. `, ...[
        paragraph(...[
            sentence(`Як можна було помітити, кожен виклик програми це по суті створення продовження і його передача в програму що викликається. `),
            sentence(`Тобто `, L0, ` ніколи не повертає керування назад, вона лише викликає програму продовження - `, l0(kw(`super`)), ` - в якості `, link(`функції зворотного виклику`, callback), `. `),
            sentence(`Звичний нам вигляд виклику і звернення до його результатів це лише синтаксичний цукор. `),
            sentence(`І це дуже важливо, тому що під капотом повсякденний код (див. `, example_4, `) перетворюється на певного роду зв'язаний список (див. `, example_5, `). `),
            sentence(`Цей список по суті складається з окремих вузлів: пар оголошення продовження та передачі виконання в цільову програму. `),
            sentence(`Таким чином в `, L0, `, ніколи не відбувається двох викликів поспіль, адже кожному виклику передує оголошення продовження. `),
        ]),
        example_4,
        example_5,
        paragraph(...[
            // sentence(`Оголошення програми не є`),
            sentence(`Окремі вузли цього своєрідного зв'язного списку називають інструкціями. `),
            sentence(`Оскільки в `, L0, ` немає складних виразів, інструкції можна дуже легко описати за допомогою наборів чисел. `),
            sentence(`Якщо впорядкувати усі оголошені до місця виклику змінні в список (буфер) і пронумерувати їх, то окрему інструкцію можна представити у вигляді набору номерів. `),
            sentence(`Таким чином, під час виклику перший номер вказуватиме на номер змінної в буфері якій буде передано керування, а решта номерів вказуватимуть на відповідні аргументи (див. `, example_6, `). `),
            sentence(``),
            // sentence(`Мова на цьому не зупиняється: справа в тому, що оголошення програми в `, L0, ` насправді є викликом іншої програми. `),
            // sentence(`Але перед тим як перейти до цього потрібно зрозуміти яким чином мова реалізує механізм замикань. `),
            // sentence(`Як ми вже з'ясували`),
            sentence(``),
            sentence(``),
        ]),
        example_6,
    ]),
    section(``, ...[
        paragraph(...[
            sentence(``),
        ]),
    ]),
])
