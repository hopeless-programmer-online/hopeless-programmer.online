import React from 'react'
import { article, c, cm, code, cs, emp, f, fig, illustration, js, jsx, kw, link, lt, neg, note, paragraph, py, quote, section, sentence, v, l0, cpp, lts } from '../classes/shortcuts'

const cps = `https://en.wikipedia.org/wiki/Continuation-passing_style`
const callback = `https://uk.wikipedia.org/wiki/Callback_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`
const sugar = `https://uk.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%BD%D0%B8%D0%B9_%D1%86%D1%83%D0%BA%D0%BE%D1%80`
const closure = `https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)`
const first_class = `https://uk.wikipedia.org/wiki/%D0%9E%D0%B1%27%D1%94%D0%BA%D1%82_%D0%BF%D0%B5%D1%80%D1%88%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%83`

class L0 extends React.Component {
    public render() {
        return (
            <i style={{ fontWeight : `bold`, color : `crimson`, fontFamily : `Helvetica` }}>L<sup>0</sup></i>
        )
    }
}

const example_1 = illustration(``, l0(...[
    [ cm(`; оголошення програми`) ],
    [ f(`my program`), ` (`, v(`x`), `, `, v(`y`), `, `, v(`z`), `) {` ],
    [ `    `, cm(`; повернення з програми`) ],
    [ `    `, kw(`super`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; виклик програми`) ],
    [ v(`u`), `, `, v(`v`), `, `, v(`w`), ` : `, f(`my program`), `(`, lt(`4`), `, `, lt(`5`), `, `, lt(`6`), `)` ],
    [ `` ],
    [ cm(`; друк результатів`) ],
    [ f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
]))
const example_2 = illustration(``, l0(...[
    [ ``, f(`f`), ` () {` ],
    [ `    `, kw(`super`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; неявна передача продовження`) ],
    [ ``, v(`u`), `, `, v(`v`), `, `, v(`w`), ` : `, f(`f`), `()` ],
    [ `` ],
    [ ``, f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
    [ `` ],
    [ ``, f(`g`), ` (`, f(`then`), `) {` ],
    [ `    `, f(`then`), `(`, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `)` ],
    [ `}` ],
    [ cm(`; програма-продовження`) ],
    [ ``, f(`then`), ` (`, v(`u`), `, `, v(`v`), `, `, v(`w`), `) {` ],
    [ `    `, f(`print`), `(`, v(`u`), `, `, v(`v`), `, `, v(`w`), `)` ],
    [ `}` ],
    [ `` ],
    [ cm(`; явна передача продовження`) ],
    [ ``, f(`g`), `(`, f(`then`), `)` ],
]))
const example_3 = illustration(``, l0(...[
    [ `outer () {` ],
    [ `    inner () {` ],
    [ `        ; вихід з outer()` ],
    [ `        /super()` ],
    [ `    }` ],
    [ `    ` ],
    [ `    ; виклик inner` ],
    [ `    inner()` ],
    [ `}` ],
]))
const example_4 = illustration(``, l0(...[
    [ `f(x, y) {` ],
    [ `    z : add(x, y)` ],
    [ `    ` ],
    [ `    print(z)` ],
    [ `}` ],
    [ `` ],
    [ `f(1, 2)` ],
    [ `f(3, 4)` ],
]))
const example_5 = illustration(``, l0(...[
    [ `f (super, x, y) {` ],
    [ `    then3 (z) {` ],
    [ `        `, cm(`; print виведе z після чого`) ],
    [ `        `, cm(`; передасть керування super`) ],
    [ `        print(super, z)` ],
    [ `    }` ],
    [ `    ` ],
    [ `    `, cm(`; add передасть керування then3, разом`) ],
    [ `    `, cm(`; з результатом операції додавання`) ],
    [ `    add(then3, x, y)` ],
    [ `}` ],
    [ `` ],
    [ `then () {` ],
    [ `    then2 () {` ],
    [ `        `, cm(`; тут програма завершиться`) ],
    [ `    }` ],
    [ `    `, cm(`; цей виклик f після свого виконання`) ],
    [ `    `, cm(`; передасть керування then2`) ],
    [ `    f(then2, 3, 4)` ],
    [ `}` ],
    [ ``, cm(`; після свого виконання f`) ],
    [ ``, cm(`; передасть керування then`) ],
    [ `f(then, 1, 2)` ],
]))
const example_6 = illustration(``, l0(...[
    [ `f(then, add, y, x) {` ],
    [ `    `, cm(`; наступний виклик можна записати як:`) ],
    [ `    `, cm(`; [ 1, 0, 3, 2 ]`) ],
    [ `    add(then, x, y)` ],
    [ `    `, cm(`; керування буде передано змінній №1 (add)`) ],
    [ `    `, cm(`; в якості аргументів будуть передані змінні`) ],
    [ `    `, cm(`; №0 (then), №3 (x) та №2 (y)`) ],
    [ `}` ],
]))

export default  article(sentence(`Мова програмування `, L0, `. `), {}, ...[
    section(sentence(`Що таке `, L0, `? `), ...[
        paragraph(...[
            sentence(L0, ` - це мініатюрна та дещо незвична мова програмування створена мною в дослідницьких цілях. `),
            sentence(`Вона складається з пари синтаксичних конструкцій, активно експлуатує ідею `, link(`передачі продовжень`, cps), ` та надає доступ до структури програми в часі виконання. `),
            sentence(`Це дозволяє `, L0, ` робити речі небачені для більшості інших мов, а саме здатність до контролю типів та оптимізації з використанням самих лише користувацьких бібліотек, без втручання в транслятор. `),
            sentence(`Але аби пояснити як саме це пов'язано та що це дає, для початку потрібно познайомитись з самою мовою. `),
        ]),
        illustration('', l0(...[
            [ f(`print`), `(`, lt(`"hello, world!"`), `)` ],
        ]))
    ]),
    section(`Програми та інструкції. `, ...[
        paragraph(...[
            sentence(`Функцій в `, L0, ` звуться програмами і, на відміну від перших, ніколи не повертають назад ні значень, ні керування. `),
            sentence(`Натомість, перед викликом кожної програми весь наступний код загортається в окрему програму-продовження і передається в якості `, link(`функції зворотного виклику`, callback), `. `),
            sentence(`Якщо цільова програма вирішить виконати `, js(kw(`return`)), ` їй не доведеться `, fig(`повертатись`), `, вона просто передасть керування в продовження. `),
            sentence(`Це одна з ключових ідей в розумінні `, L0, `: звичні нам виклики функцій тут виступають лише в ролі `, link(`синтаксичного цукру`, sugar), `. `),
            sentence(`Насправді ж весь процес виконання виглядатиме як дуже довгий ланцюжок передачі керування продовженням. `),
        ]),
        paragraph(...[
            sentence(`Наступним важливим моментом `, L0, ` є реалізація `, link(`замикань`, closure), `. `),
            sentence(`При оголошенні програми вона `, fig(`захоплює`), ` усі змінні оголошені до неї і зберігає їх у своєрідне сховище. `),
            sentence(`Під час виклику це сховище розгортається і об'єднується з аргументами, формуючи повний набір змінних з якими може працювати програма. `),
            sentence(`Тому, навіть якщо ми не записуємо це явно, кожну програму або продовження можна уявити як функцію, що приймає в якості параметрів `, emp(`усі`), ` змінні оголошені до неї. `),
        ]),
        paragraph(...[
            sentence(`Отож, в `, L0, ` кожен виклик програми сам є окремою маленькою програмою, яку ми надалі будемо називати `, fig(`інструкцією`), `. `),
            sentence(`Коли інструкція починає своє виконання то відновлені з її сховища змінні зливаються з переданими їй аргументами, формуючи своєрідний `, fig(`буфер`), `. `),
            sentence(`Розташування змінних у цьому буфері влаштоване так, що воно точно повторює розташування аргументів відповідної програми, з урахуванням тих які були захоплені під час її оголошення. `),
            sentence(`Далі з цього буфера вибираються потрібні значення: програми, якій необхідно передати керування та аргументів які потрібні для її роботи. `),
            sentence(`Ця програма насправді теж є інструкцією: першою ланкою в ланцюжку інструкцій `, fig(`великої`), ` програми. `),
            sentence(`Щойно усі значення будуть вибрані керування буде безповоротно передане новій інструкції і цикл повториться. `),
        ]),
        paragraph(...[
            sentence(``),
            sentence(``),
            sentence(``),
        ]),
    ]),
    section(``, ...[
        paragraph(...[
            sentence(``),
        ]),
    ]),
])
