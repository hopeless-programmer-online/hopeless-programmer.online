import { illustration, paragraph, sentence, link, section, article, note, list, ref, fig, neg, kw, cm, cpp, c, f, v, lt, js, emp, code, cs, lua, py, p } from "../classes/shortcuts";

const code_1  = illustration(sentence(`Ієрархія класів базових об'єктів.`), js(...[
    [ kw(`class`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Boolean`), ` `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Number`), `  `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`String`), `  `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Array`), `   `, kw(`extends`), ` `, c(`Object`), ` {}` ],
]))
const code_2  = illustration(sentence(`Похідні класи реалізують `, link(`абстрактний метод`, `https://uk.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%B8%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4`), ` з базового класу.`), js(...[
    [ kw(`class`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// абстрактний`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Boolean`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Number`), `  `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`String`), `  `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Array`), `   `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `}` ],
    [ `` ],
    [ kw(`const`), ` `, v(`number`), ` = `, kw(`new`), ` `, c(`Number`), `();` ],
    [ v(`number`), `.`, f(`ToJSON`), `();` ],
]))
const code_3  = illustration(sentence(`Зі збільшенням кількості підтримуваних форматів росте і кількість методів.`), js(...[
    [ kw(`class`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// абстрактний`) ],
    [ `    `, f(`ToXML`), `();  `, cm(`// абстрактний`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Boolean`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `    `, f(`ToXML`), `();  `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Number`), `  `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `    `, f(`ToXML`), `();  `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`String`), `  `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `    `, f(`ToXML`), `();  `, cm(`// реалізація`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Array`), `   `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`ToJSON`), `(); `, cm(`// реалізація`) ],
    [ `    `, f(`ToXML`), `();  `, cm(`// реалізація`) ],
    [ `}` ],
]))
const code_4  = illustration(sentence(`Динамічний вибір формату при перетворенні даних.`), js(...[
    [ cm(`// type = "json" або "xml"`) ],
    [ kw(`function`), ` `, f(`f`), `(`, v(`object`), `, `, v(`type`), `) {` ],
    [ `    `, kw(`switch`), ` (`, v(`type`), `) {` ],
    [ `        `, kw(`case`), ` `, lt(`"json"`), `: `, kw(`return`), ` `, v(`object`), `.`, f(`ToJSON`), `();` ],
    [ `        `, kw(`case`), ` `, lt(`"xml"`), ` : `, kw(`return`), ` `, v(`object`), `.`, f(`ToXML`), `();` ],
    [ `    }` ],
    [ `}` ],
    [ `` ],
    [ cm(`// type = \`ToJSON\` або \`ToXML\``) ],
    [ kw(`function`), ` `, f(`f`), `(`, v(`object`), `, `, v(`type`), `) {` ],
    [ `    `, kw(`return`), ` `, v(`object`), `[`, v(`type`), `]();` ],
    [ `}` ],
]))
const code_5  = illustration(sentence(`Логіку перетворення можна винести в окремі класи.`), js(...[
    [ kw(`class`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Boolean`), ` `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Number`), `  `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`String`), `  `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ kw(`class`), ` `, c(`Array`), `   `, kw(`extends`), ` `, c(`Object`), ` {}` ],
    [ `` ],
    [ kw(`class`), ` `, c(`JSON`), ` {` ],
    [ `    `, f(`To`), `(`, v(`entity`), `);` ],
    [ `}` ],
    [ kw(`class`), ` `, c(`XML`), ` {` ],
    [ `    `, f(`To`), `(`, v(`entity`), `);` ],
    [ `}` ],
]))
const code_6  = illustration(sentence(`Галуження з використанням конструктора.`), js(...[
    [ kw(`switch`), ` (`, v(`object`), `.`, kw(`constructor`), `) {` ],
    [ `    `, kw(`case`), ` `, c(`Boolean`), ` : `, kw(`return`), ` ... ;` ],
    [ `    `, kw(`case`), ` `, c(`Number`), `  : `, kw(`return`), ` ... ;` ],
    [ `    `, kw(`case`), ` `, c(`String`), `  : `, kw(`return`), ` ... ;` ],
    [ `    ...` ],
    [ `}` ],
]))
const code_7  = illustration(sentence(`Галуження з використанням типу об'єкта.`), js(...[
    [ kw(`class`), ` `, c(`Number`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, kw(`get`), ` `, f(`Type`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`"number"`), `;` ],
    [ `    }` ],
    [ `}` ],
    [ `...` ],
    [ kw(`switch`), ` (`, v(`object`), `.`, v(`Type`), `) {` ],
    [ `    `, kw(`case`), ` `, lt(`"boolean"`), ` : `, kw(`return`), ` ... ;` ],
    [ `    `, kw(`case`), ` `, lt(`"number"`), `  : `, kw(`return`), ` ... ;` ],
    [ `    `, kw(`case`), ` `, lt(`"string"`), `  : `, kw(`return`), ` ... ;` ],
    [ `    ...` ],
    [ `}` ],
]))
const code_8  = illustration(sentence(`Ручне приведення до типу.`), js(...[
    [ kw(`if`), ` (`, v(`object`), ` `, kw(`instanceof`), ` `, c(`Boolean`), `) {` ],
    [ `    `, kw(`return`), ` ... ;` ],
    [ `}` ],
    [ kw(`else`), ` `, kw(`if`), ` (`, v(`object`), ` `, kw(`instanceof`), ` `, c(`Number`), `) {` ],
    [ `    `, kw(`return`), ` ... ;` ],
    [ `}` ],
    [ `...` ],
]))
const code_9  = illustration(sentence(`Клас Visitor зосереджує в собі методи, які будуть опрацьовувати відповідні типи даних в похідних класах.`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitBoolean`), `(`, v(`boolean`), `); `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitNumber`), ` (`, v(`number`), `);  `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitString`), ` (`, v(`string`), `);  `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitArray`), `  (`, v(`array`), `);   `, cm(`// абстрактний`) ],
    [ `}` ],
]))
const code_10 = illustration(sentence(`Відвідувані класи викликають відповідні їм методи з класу Visitor.`), js(...[
    [ kw(`class`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `); `, cm(`// абстрактний`) ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Number`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `) { `, cm(`// реалізація`) ],
    [ `        `, v(`visitor`), `.`, f(`VisitNumber`), `(`, kw(`this`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ kw(`class`), ` `, c(`String`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `) { `, cm(`// реалізація`) ],
    [ `        `, v(`visitor`), `.`, f(`VisitString`), `(`, kw(`this`), `);` ],
    [ `    }` ],
    [ `}` ],
]))
const code_11 = illustration(sentence(`Похідний клас JSON лише реалізує абстрактні методи Visitor. Перенаправлення відповідно до типу об'єкта відбувається "за кулісами".`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitBoolean`), `(`, v(`boolean`), `); `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitNumber`), ` (`, v(`number`), `);  `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitString`), ` (`, v(`string`), `);  `, cm(`// абстрактний`) ],
    [ `    `, f(`VisitArray`), `  (`, v(`array`), `);   `, cm(`// абстрактний`) ],
    [ `}` ],
    [ `` ],
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitBoolean`), `(`, v(`boolean`), `) { `, cm(`// реалізація`) ],
    [ `        `, f(`print`), `(`, lt(`"boolean"`), `);` ],
    [ `    }` ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `) {  `, cm(`// реалізація`) ],
    [ `        `, f(`print`), `(`, lt(`"number"`), `);` ],
    [ `    }` ],
    [ `    `, f(`VisitString`), `(`, v(`string`), `) {  `, cm(`// реалізація`) ],
    [ `        `, f(`print`), `(`, lt(`"string"`), `);` ],
    [ `    }` ],
    [ `    `, f(`VisitArray`), `(`, v(`array`), `)  {   `, cm(`// реалізація`) ],
    [ `        `, f(`print`), `(`, lt(`"array"`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ `` ],
    [ kw(`let`), ` `, v(`json`), `   = `, kw(`new`), ` `, c(`JSON`), `();` ],
    [ kw(`let`), ` `, v(`object`), ` = `, kw(`new`), ` `, c(`Number`), `();` ],
    [ `` ],
    [ v(`object`), `.`, f(`Accept`), `(`, v(`json`), `); `, cm(`// json.VisitNumber(object)`) ],
]))
const code_12 = illustration(sentence(`Легше зіставити VisitNumber з Visit, а не з Accept.`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`Visit`), `(`, v(`object`), `) {` ],
    [ `        `, v(`object`), `.`, c(`Accept`), `(`, kw(`this`), `);` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`let`), ` `, v(`json`), `   = `, kw(`new`), ` `, c(`JSON`), `();` ],
    [ kw(`let`), ` `, v(`object`), ` = `, kw(`new`), ` `, c(`Number`), `();` ],
    [ `` ],
    [ v(`json`), `.`, c(`Visit`), `(`, v(`object`), `); `, cm(`// json.VisitNumber(object)`) ],
]))
const code_13 = illustration(p(`Метод VisitNumber повертає значення замість того, щоб зберігати його. `, `П'ятірка виводиться лише з міркувань абстрагування від наповнення класу Number : )`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`Visit`), `(`, v(`object`), `) {` ],
    [ `        `, kw(`return`), ` `, v(`object`), `.`, f(`Accept`), `(`, kw(`this`), `);` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`Number`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `) {` ],
    [ `        `, kw(`return`), ` `, v(`visitor`), `.`, f(`VisitNumber`), `(`, kw(`this`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `) { `, cm(`// заміщений`) ],
    [ `        `, kw(`return`), ` `, lt(`\`5\``), `;` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`let`), ` `, v(`json`), `   = `, kw(`new`), ` `, c(`JSON`), `();` ],
    [ kw(`let`), ` `, v(`object`), ` = `, kw(`new`), ` `, c(`Number`), `();` ],
    [ `` ],
    [ kw(`let`), ` `, v(`result`), ` = `, v(`json`), `.`, f(`Visit`), `(`, v(`object`), `); `, cm(`// \`5\``) ],
]))
const code_14 = illustration(sentence(`Використовуючи динамічну типізацію можна передавати в методи додаткові аргументи.`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`Visit`), `(`, v(`object`), `, ...`, v(`others`), `) {` ],
    [ `        `, kw(`return`), ` `, v(`object`), `.`, f(`Accept`), `(`, kw(`this`), `, ...`, v(`others`), `);` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`Number`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `, ...`, v(`others`), `) {` ],
    [ `        `, kw(`return`), ` `, v(`visitor`), `.`, f(`VisitNumber`), `(`, kw(`this`), `, ...`, v(`others`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `, `, v(`x`), `, `, v(`y`), `, `, v(`z`), `) { `, cm(`// заміщений`) ],
    [ `        `, kw(`return`), ` `, lt(`\`number: `), /*ltc*/lt(`\${`), v(`x`), /*ltc*/lt(`}`), lt(`, `), /*ltc*/lt(`\${`), v(`y`), /*ltc*/lt(`}`), lt(`, `), /*ltc*/lt(`\${`), v(`z`), /*ltc*/lt(`}`), lt(`\``), `;` ],
    [ `    }` ],
    [ `    `, f(`VisitString`), `(`, v(`string`), `, `, v(`x`), `) {       `, cm(`// заміщений`) ],
    [ `        `, kw(`return`), ` `, lt(`\`string: `), /*ltc*/lt(`\${`), v(`x`), /*ltc*/lt(`}`), lt(`\``), `;` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`let`), ` `, v(`json`), `   = `, kw(`new`), ` `, c(`JSON`), `();` ],
    [ kw(`let`), ` `, v(`object`), ` = `, kw(`new`), ` `, c(`Number`), `();` ],
    [ `` ],
    [ kw(`let`), ` `, v(`result`), ` = `, v(`json`), `.`, f(`Visit`), `(`, v(`object`), `, `, lt(`1`), `, `, lt(`2`), `, `, lt(`3`), `); `, cm(`// \`number: 1, 2, 3\``) ],
]))
const code_15 = illustration(sentence(`Тепер корові не обов'язково займатись диспетчеризацією.`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitObject`), `(`, v(`object`), `, ...`, v(`others`), `) { `, cm(`// абстрактний`) ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `, ...`, v(`others`), `) { `, cm(`// віртуальний`) ],
    [ `        `, kw(`return`), ` `, v(`visitor`), `.`, f(`VisitObject`), `(`, kw(`this`), `, ...`, v(`others`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ kw(`class`), ` `, c(`Number`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, f(`Accept`), `(`, v(`visitor`), `, ...`, v(`others`), `) { `, cm(`// заміщений`) ],
    [ `        `, kw(`return`), ` `, v(`visitor`), `.`, f(`VisitNumber`), `(`, kw(`this`), `, ...`, v(`others`), `);` ],
    [ `    }` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`Cow`), ` `, kw(`extends`), ` `, c(`Object`), ` {` ],
    [ `    `, cm(`// нічого не заміщуємо!`) ],
    [ `}` ],
    [ `` ],
    [ kw(`let`), ` `, v(`visitor`), `  = `, kw(`new`), ` `, c(`Visitor`), `();` ],
    [ kw(`let`), ` `, v(`cow`), `      = `, kw(`new`), ` `, c(`Cow`), `();` ],
    [ `` ],
    [ v(`visitor`), `.`, f(`Visit`), `(`, v(`cow`), `); `, cm(`// Visitor.VisitObject`) ],
]))
const code_16 = illustration(sentence(`Проблеми при опрацьовуванні класів, які ми не хочемо підтримувати.`), js(...[
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    `, cm(`// числа`) ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `) {` ],
    [ `        `, kw(`return`), ` `, lt(`"number"`), `;` ],
    [ `    }` ],
    [ `    `, cm(`// решта типів`) ],
    [ `    `, f(`VisitRecord`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`""`), `;` ],
    [ `    }` ],
    [ `    `, f(`VisitBoolean`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`""`), `;` ],
    [ `    }` ],
    [ `    `, f(`VisitString`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`""`), `;` ],
    [ `    }` ],
    [ `    `, f(`VisitObject`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`""`), `;` ],
    [ `    }` ],
    [ `}` ],
]))
const code_17 = illustration(sentence(`Тепер обробкою усіх нецікавих класів займається метод VisitOther.`), js(...[
    [ kw(`class`), ` `, c(`Visitor`), ` {` ],
    [ `    `, f(`VisitOther`), `(`, v(`object`), `); `, cm(`  // абстрактний`) ],
    [ `    `, f(`VisitObject`), `(`, v(`object`), `) {`, cm(` // віртуальний`) ],
    [ `        `, kw(`return`), ` `, kw(`this`), `.`, f(`VisitOther`), `(`, v(`object`), `);` ],
    [ `    }` ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `) {`, cm(` // віртуальний`) ],
    [ `        `, kw(`return`), ` `, kw(`this`), `.`, f(`VisitOther`), `(`, v(`number`), `);` ],
    [ `    }` ],
    [ `    `, f(`VisitString`), `(`, v(`string`), `) {`, cm(` // віртуальний`) ],
    [ `        `, kw(`return`), ` `, kw(`this`), `.`, f(`VisitOther`), `(`, v(`string`), `);` ],
    [ `    }` ],
    [ `    ...` ],
    [ `}` ],
    [ `...` ],
    [ kw(`class`), ` `, c(`JSON`), ` `, kw(`extends`), ` `, c(`Visitor`), ` {` ],
    [ `    `, cm(`// числа`) ],
    [ `    `, f(`VisitNumber`), `(`, v(`number`), `) {` ],
    [ `        `, kw(`return`), ` `, lt(`"number"`), `;` ],
    [ `    }` ],
    [ `    `, cm(`// решта типів`) ],
    [ `    `, f(`VisitOther`), `() {` ],
    [ `        `, kw(`return`), ` `, lt(`""`), `;` ],
    [ `    }` ],
    [ `}` ],
]))

const note_1    = note('Насправді мені просто було ліньки шукати матеріал по темі. ');
const note_2    = note(sentence('А це нам точно знадобиться, ', link('Мерфі гарантує', 'https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%9C%D0%B5%D1%80%D1%84%D1%96'), '!.'));
const note_3    = note(...[
    sentence('Принцип підстановки Лісков тут не зовсім доречний, оскільки мова все ж йде ', emp('не'), ' про успадкування. '),
    sentence('Даний випадок радше входить до змішаної категорії, в комбінації з іншими принципами SOLID, а саме ', link('принципом розділення інтерфейсу', 'https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D1%80%D0%BE%D0%B7%D0%B4%D1%96%D0%BB%D0%B5%D0%BD%D0%BD%D1%8F_%D1%96%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%83'), ' та ', link('принципом інверсії залежностей', 'https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D1%96%D0%BD%D0%B2%D0%B5%D1%80%D1%81%D1%96%D1%97_%D0%B7%D0%B0%D0%BB%D0%B5%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B5%D0%B9'), '. '),
]);
const note_4    = note(sentence('Це не повинно створювати для компілятора якихось труднощів, адже мова йде про ', emp('не'), ' віртуальну функцію. '));
const note_5    = note('Звичайно, статична типізація не є вадою безпосередньо і в прямому розумінні. ', 'Тут мається на увазі те, що разом з іншими особливостями статично типізованих мов реалізувати подібне рішення стає важко. ');

const object_Accept_visitor = js( v('object'), '.', f('Accept'), '(', v('visitor'), ')' );
const visitor_Visit_object = js( v('visitor'), '.', f('Visit'), '(', v('object'), ')' );
const visitor_Visit_number = js( v('visitor'), '.', f('Visit'), '(', v('number'), ')' );
const Visit = js(f('Visit'));
const Accept = js(f('Accept'));
const VisitNumber = js(f('VisitNumber'));
const VisitString = js(f('VisitString'));
const number_Accept_visitor = js( v('number'), '.', f('Accept'), '(', v('visitor'), ')' );
const visitor_VisitNumber_number = js( v('visitor'), '.', f('VisitNumber'), '(', v('number'), ')' );
const number = js(v('number'));
const visitor = js(v('visitor'));
const others = js( '...', v('others') );
const $Object = js(c('Object'));
const Object_Accept = js( c('Object'), '.', f('Accept') );

export default article([ 'Це можна покращити! ', 'Відвідувач та ECMAScript 6. ' ], { created : new Date('2019-03-03') }, ...[
    section('Передмова', ...[
        paragraph(...[
            sentence(link('Відвідувач', 'https://uk.wikipedia.org/wiki/%D0%92%D1%96%D0%B4%D0%B2%D1%96%D0%B4%D1%83%D0%B2%D0%B0%D1%87_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)'), ' (англ. visitor) - один з класичних ', link('шаблонів проектування', 'https://uk.wikipedia.org/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%B8_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B7%D0%B0%D0%B1%D0%B5%D0%B7%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%BD%D1%8F'), '. '),
            sentence('Про нього часто розказують як у навчальних закладах, так і на різноманітних курсах з програмування. '),
            sentence('Він не зав\'язаний на особливості якоїсь конкретної мови, а тому (в теорії) застосувати його можна будь де. '),
        ]),
        paragraph(...[
            sentence('Нещодавно мені випала нагода використати відвідувач в ', link('ECMAScript 6', 'https://uk.wikipedia.org/wiki/ECMAScript'), ' на робочому проекті. '),
            sentence('До цього я стикався з ним лише в мовах зі ', link('статичною типізацією', 'https://uk.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%82%D0%B8%D0%BF%D1%96%D0%B7%D0%B0%D1%86%D1%96%D1%97'), ', а тому моя перша реалізація не була позбавлена вад властивих цьому класу мов. '),
            sentence('Але час проведений наодинці з ', link('JavaScript', 'https://uk.wikipedia.org/wiki/JavaScript'), ' не минув без наслідків. '),
            sentence('Динамічна типізація все ж зробила свою брудну справу і коли я отямився було вже надто пізно... '),
            sentence('Відвідувача тепер не впізнала б і рідна мати! Він вже не був тою ', fig('класичною реалізацією'), ', яку ми всі знали. На щастя. '),
        ]),
        paragraph(...[
            sentence('Я вирішив пошукати схожі реалізації цього шаблону на ES6, але не знайшов чогось суттєво просунутішого за класичний варіант. '),
            sentence('А це при тому, що мова є динамічно-типізованою, тобто дозволяє повертати і передавати в якості аргументів довільні об\'єкти! '),
            sentence('Ай-яй-яй... що ж, доведеться мені самому взятись за це', note_1, '! '),
        ]),
    ]),
    section('Область застосування', ...[
        paragraph(...[
            sentence('Для початку варто було б згадати навіщо взагалі потрібен відвідувач. '),
            sentence('Припустимо що у нас є деяка ієрархія класів. '),
            sentence('Наприклад, примітиви типу чисел, стрічок, масивів і т.д. (див. ', code_1, '). '),
            sentence('Наповнення цих класів не є важливим, а тому ми залишимо його за кулісами. '),
            sentence('Завдання - реалізувати програму яка б перетворювала екземпляри цих класів в, наприклад, ', link('JSON', 'https://uk.wikipedia.org/wiki/JSON'), '. '),
        ]),
        paragraph(...[
            sentence('Ми не випадково обрали саме такі класи і саме такий формат даних. '),
            sentence('Усі вони - логічні типи, числа, стрічки, масиви - вже реалізовані в JavaScript. '),
            sentence('Те саме можна сказати і про механізм їхнього перетворення в JSON. '),
            sentence('У цьому є перевага, адже працювати з добре відомими явищами легше. '),
            sentence('Окрім цього методи вирішення цієї задачі можна порівняти з уже існуючими підходами. '),
            sentence('Це дуже добре показує те, що вирішувана задача не синтетична а цілком реальна. '),
        ]),
        paragraph(...[
            sentence('То що б ми зробили будучи на місці розробників JavaScript? '),
            sentence('Одним із найпростіших рішень є додавання в кожен клас спеціального методу. '),
            sentence('Цей метод відповідає за перетворення відповідного об\'єкта і викликається безпосередньо (див. ', code_2, '). '),
            sentence('На перший погляд така ідея є абсолютно здоровою, адже вона вирішує поставлену задачу. '),
            sentence('Але це лише на перший погляд... '),
        ]),
        code_1,
        code_2,
        paragraph(...[
            sentence('Тепер звернемось до свого внутрішнього критика і спробуємо знайти вади в подібному дизайні. '),
            sentence('Перше що можна помітити - це ', link('нагромадження обов\'язків', 'https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D1%94%D0%B4%D0%B8%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%BE%D0%B2%27%D1%8F%D0%B7%D0%BA%D1%83'), '. '),
            sentence('Кожен з наших класів тепер не лише реалізує конкретний тип даних, а ще й вміє перетворювати його в JSON. '),
            sentence('Це проблема, оскільки предметні області ', fig('бути числом/стрічкою/масивом'), ' і ', fig('вміти перетворюватись в JSON'), ' стають зв\'язаними. '),
            sentence('Ми вже не зможемо використовувати їх окремо', note_2, '. '),
            sentence('Вони стають залежними одна від одної, хоча це ', emp('не'), ' є необхідним. '),
        ]),
        paragraph(...[
            sentence('Далі, якщо нам знадобиться підтримка ще одного формату, наприклад, ', link('XML', 'https://uk.wikipedia.org/wiki/XML'), ', то доведеться додавати в ', emp('існуючі'), ' класи нові методи (див. ', code_3, '). '),
            sentence('Така залежність змушує нас ', link('модифікувати вже написані класи', 'https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%B2%D1%96%D0%B4%D0%BA%D1%80%D0%B8%D1%82%D0%BE%D1%81%D1%82%D1%96/%D0%B7%D0%B0%D0%BA%D1%80%D0%B8%D1%82%D0%BE%D1%81%D1%82%D1%96'), ', замість того щоб розширювати їх. '),
        ]),
        code_3,
        code_4,
        paragraph(...[
            sentence('Зрештою, перетворення в JSON та XML виглядають дуже схожими операціями. '),
            sentence('І було б природно мати можливість ', emp('динамічно'), ' ', link('замінювати одну операцію іншою', 'https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%BF%D1%96%D0%B4%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B8_%D0%9B%D1%96%D1%81%D0%BA%D0%BE%D0%B2'), note_3, '. '),
            sentence('Але вибрана нами стратегія не дає нам змоги зробити це. '),
            sentence('Для цього необхідно замінити метод. '),
            sentence('А зробити це ', emp('динамічно'), ' в статично-типізованих мовах програмування неможливо. '),
            sentence('На щастя тут ми можемо використати особливість JavaScript і викликати метод за іменем (див. ', code_4, '). '),
            sentence('В даному випадку це спрацює, хоч такий пошук і не є швидкою операцією. '),
        ]),
    ]),
    section('Ідея', ...[
        paragraph(...[
            sentence('Для усунення цих вад і використовують відвідувача. '),
            sentence('Ідея полягає у тому, що потрібно відділити дані від алгоритмів їх опрацювання. '),
            sentence('Кінцевим результатом мав би стати дизайн, де методи ToJSON та ToXML перетворюються в окремі класи JSON та XML (див. ', code_5, '). '),
        ]),
        code_5,
        paragraph(...[
            sentence('Але і тут не все так просто. Це завдання теж можна вирішити не єдиним способом, причому з різною ефективністю. '),
            sentence('Є три досить поширені та однаково неефективні ідеї (див. ', code_6, ', ', code_7, ' та ', code_8, '): '),
        ]),
        list(...[
            sentence('Ввести допоміжне поле для визначення типу об\'єкта і в залежності від нього проводити галуження. '),
            sentence('Проводити галуження виходячи з конструктора об\'єкта. '),
            sentence('Намагатись приводити об\'єкти до відповідних типів вручну. '),
        ]),
        paragraph(...[
            sentence('Ці підходи теж вирішують завдання, але кожен з них має свої вади. '),
            sentence('По-перше, якщо проводити галуження виходячи з конструктора об\'єкта (див. ', code_6, '), то ми втрачаємо сумісність з усіма похідними класами. '),
            sentence('По-друге, введення додаткового поля для визначення типу (див. ', code_7, ') є надлишковим, оскільки інформація про тип може бути виведена з деякого аналогу ', fig('таблиці віртуальних методів'), '. '),
            sentence('По-третє і галуження, і приведення до типу не є дешевими операціями. '),
            sentence('В даному випадку є можливість обійтись без їхнього використання. '),
        ]),
        code_6,
        code_7,
        code_8,
    ]),
    section('Реалізація', ...[
        paragraph(...[
            sentence('Класична реалізація відвідувача позбавлена згаданих вище вад. '),
            sentence('Перший крок - це створення деякої проміжної ланки, яка б надавала можливість звернення до об\'єктів відповідно до їхнього ', link('типу', 'https://uk.wikipedia.org/wiki/%D0%A2%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%B8%D1%85'), ' (див. ', code_9, '). '),
            sentence('Наступний крок - це передача процесу ', link('диспетчеризації', 'https://uk.wikipedia.org/wiki/%D0%9C%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BC%D0%B5%D1%82%D0%BE%D0%B4'), ' в область відповідальності самого об\'єкта. '),
            sentence('Тобто, тепер саме ', fig('число'), ' приймає рішення що з ним потрібно працювати як з числом (див. ', code_10, '). '),
        ]),
        code_9,
        code_10,
        paragraph(...[
            sentence('Останній крок - це використання ', link('поліморфізму', 'https://uk.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D1%96%D0%BC%D0%BE%D1%80%D1%84%D1%96%D0%B7%D0%BC_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)'), ' в класах з попередніх кроків. '),
            sentence('Введення ', link('абстрактного методу', 'https://uk.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%B8%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4'), ' в ', fig('об\'єкт'), ' дозволить опрацьовувати як ', fig('число'), ' так і ', fig('стрічку'), ' ', emp('без'), ' визначення їхнього типу. '),
            sentence('Далі, реалізація методів ', fig('відвідувача'), ' як абстрактних дозволить ', link('замістити', 'https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D1%96%D1%89%D0%B5%D0%BD%D0%BD%D1%8F_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%83'), ' їх. '),
            sentence('Таким чином похідні класи зможуть визначати алгоритми опрацювання для ', emp('конкретних'), ' типів, уникаючи приведення. '),
        ]),
        paragraph(...[
            sentence('Класи JSON та XML лише ', link('успадковують', 'https://uk.wikipedia.org/wiki/%D0%A3%D1%81%D0%BF%D0%B0%D0%B4%D0%BA%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)'), ' Visitor і реалізовують методи для опрацювання відповідних класів (див. ', code_11, '). '),
            sentence(fig('Перенаправлення'), ' викликів відповідно до типу відбувається неявно, зусиллями самих опрацьовуваних об\'єктів. '),
            sentence('Усе це відбувається задешево - ціною виклику лише одного ', link('віртуального методу', 'https://uk.wikipedia.org/wiki/%D0%92%D1%96%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D0%B8%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4'), '. '),
            sentence('Це дешевше ніж галуження чи приведення до типу. '),
            sentence('Можливо, виходячи з постановки задачі, це ', emp('в принципі'), ' найдешевший варіант з точки зору швидкодії. '),
        ]),
        code_11,
        paragraph(...[
            sentence('Ось це була ', fig('класична'), ' реалізація відвідувача. '),
            sentence('Та, яка часто використовується в статично-типізованих мовах типу ', link('C#', 'https://uk.wikipedia.org/wiki/C_Sharp'), ', ', link('Java', 'https://uk.wikipedia.org/wiki/Java'), ' чи ', link('C++', 'https://uk.wikipedia.org/wiki/C%2B%2B'), '. '),
            sentence('Але ', link('JavaScript', 'https://uk.wikipedia.org/wiki/JavaScript'), ', а тим паче ', link('ECMAScript 6', 'https://uk.wikipedia.org/wiki/ECMAScript'), ', має певні особливості які дозволяють робити речі, неможливі з точки зору вищезгаданих мов. '),
        ]),
    ]),
    section('Розвиваємо ідею', ...[
        paragraph(...[
            sentence('Перше, що можна покращити - це зовнішній вигляд. '),
            sentence('Можна перенести виклик ', object_Accept_visitor, ' всередину нового методу: ', visitor_Visit_object, ' (див. ', code_12, '). '),
            sentence('З точки зору продуктивності ми радше за все нічого не втратимо, такий виклик легко може бути оптимізований', note_4, '. '),
            sentence('З точки ж зору синтаксису метод ', Visit, ' візуально легше зіставити з методами ', VisitNumber, ', ', VisitString, ' і т.д.. '),
            sentence('Створюється ілюзія того, що поліморфізм діє через аргументи і автоматично вибирає ту реалізацію, яка збігається з типом відвідуваного об\'єкту. '),
        ]),
        code_12,
        paragraph(...[
            sentence('Іншими словами - зв\'язок між ', number_Accept_visitor, ' та ', visitor_VisitNumber_number, ' не є очевидний. '),
            sentence('Дуже важко здогадатись, що перший метод об\'єкта ', number, ' призведе до виклику іншого методу об\'єкта ', visitor, '. '),
            sentence('А от у випадку ', visitor_Visit_number, ' та ', visitor_VisitNumber_number, ' все простіше. '),
            sentence('Методи не лише мають схожі назви, але й стосуються одного і того ж об\'єкта. '),
            sentence('У цьому випадку користувачу легше дистанціюватись від особливостей реалізації, віддавши все на волю ', fig('магії'), '. '),
        ]),
        paragraph(...[
            sentence('Далі, ми можемо використати динамічну типізацію JavaScript і дозволити методам ', Visit, ', ', Accept, ' та ', VisitNumber, ' повертати результат. '),
            sentence('В статично типізованих мовах цього важко досягнути, оскільки тип результату має бути відомий заздалегідь. '),
            sentence('Доводиться йти на компроміси. '),
            sentence('Можна відмовитись від результату, акумулюючи його всередині об\'єкта. '),
            sentence('Але це робить неможливим використання функціонального програмування, та й узагалі погано впливає на зручність механізму в цілому. '),
            sentence('Можна повертати абстрактний результат, який потім можна буде привести до потрібного типу. '),
            sentence('Це створює зайву операцію приведення, але допомагає обійти дану проблему. '),
            sentence('На щастя JavaScript позбавлений цих ', fig('вад'), note_5, ', а тому ми можемо дозволити собі подібну розкіш (див. ', code_13, '). '),
        ]),
        code_13,
        paragraph(...[
            sentence('Також часто виникає питання про додаткові аргументи при відвідуванні об\'єктів. '),
            sentence('І знову перешкодою для цього може стати статична типізація, відсутня в JavaScript. '),
            sentence('В інших мовах часто доводиться передавати такі аргументи через ', link('поля', 'https://uk.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B5_%D0%BA%D0%BB%D0%B0%D1%81%D1%83'), ' самого відвідувача, але в нашому випадку це не потрібно. '),
            sentence('Окрім цього, використовуючи ECMAScript 6 можна не лише зробити додаткові аргументи можливими, але й зручними та інтуїтивно зрозумілими. '),
            sentence('Використовуючи оператори для ', link('решти аргументів', 'https://developer.mozilla.org/uk/docs/Web/JavaScript/Reference/Functions/%D1%80%D0%B5%D1%88%D1%82%D0%B0_%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%96%D0%B2'), ' та ', link('розпакування', 'https://developer.mozilla.org/uk/docs/Web/JavaScript/Reference/Operators/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80_%D1%80%D0%BE%D0%B7%D0%BF%D0%B0%D0%BA%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F'), ' можна вирішити все розмноживши єдиний рядок - ', others, ' (див. ', code_14, '). '),
            sentence('Це не лише ', emp('не'), ' буде конфліктувати з базовим класом і рештою інфраструктури, але й дозволить реалізувати різну кількість і типи аргументів для різних відвідуваних об\'єктів. '),
        ]),
        code_14,
    ]),
    section('Ще не все!', ...[
        paragraph(...[
            sentence('Можна не зупинятись на досягнутому. '),
            sentence('Ще одна область для вдосконалення - це особлива диспетчеризація тих класів, які успадковують ', $Object, ', але ', emp('не'), ' реалізують метод ', Accept, '. '),
            sentence('Для цього можна ввести у відвідувач додатковий метод, який буде опрацьовувати ці об\'єкти. '),
            sentence('Також метод ', Object_Accept, ' тепер буде мати початкову реалізацію, а похідні класи зможуть змінювати її за бажанням (див. ', code_15, '). '),
        ]),
        code_15,
        paragraph(...[
            sentence('Ще один розповсюджений недолік класичної реалізації відвідувача - це необхідність визначати всі його методи, навіть якщо більша їх половина має ідентичний код. '),
            sentence('Припустимо, що ми хочемо перетворювати в JSON ', emp('лише'), ' числа. '),
            sentence('Усі ж інші об\'єкти ми будемо повертати у вигляді порожньої стрічки. '),
            sentence('В такій ситуації нам доведеться визначити стільки методів, скільки класів існує в нашій ієрархії (див. ', code_16, '). '),
            sentence('Окрім цього, така реалізація буде не стабільною, оскільки додавання нових класів буде змушувати нас додавати нові ', emp('однотипні'), ' методи до похідного відвідувача. '),
        ]),
        code_16,
        code_17,
        paragraph(...[
            sentence('Але є спосіб боротись з цим. '),
            sentence('Можна оголосити ще один опрацьовувач в базовому класі відвідувача. '),
            sentence('Він буде працювати ', emp('лише'), ' з тими об\'єктами, обробка яких ', emp('не'), ' є заміщеною в похідному класі. '),
            sentence('Досягається це за допомогою перенаправлення з усіх методів ', Visit, ' базового класу (див. ', code_17, '). '),
            sentence('Заміщені ж методи не будуть наділені такою поведінкою, реалізуючи натомість код для опрацювання об\'єкта конкретного типу. '),
            sentence('Такий підхід не лише зменшить кількість коду, але й позбавить нас необхідності в додаванні нових методів. '),
        ]),
    ]),
    section('Післямова', ...[
        paragraph(...[
            sentence('Відвідувач - доволі корисний шаблон проектування. '),
            sentence('Він допомагає не лише правильно відділити та інкапсулювати логіку обробки даних, але й зробити цей процес ефективним з точки зору швидкодії. '),
            sentence('Багато талановитих розробників яким пощастило не знати про існування відвідувача самі винаходять його в своїй практиці, хоч і називають по іншому. '),
        ]),
        paragraph(...[
            sentence('Не зважаючи на свою потужність цей підхід все ж має недоліки. '),
            sentence('Але деякі з них можна обійти в залежності від вибраної мови програмування. '),
            sentence('Навряд чи я зміг привести тут усі можливі розвинення відвідувача для ECMAScript 6. '),
            sentence('Але я сподіваюсь що описані тут ідеї все ж знадобляться комусь в його роботі. '),
        ]),
    ]),
])
