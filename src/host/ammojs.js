const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    list,
    sentence,
    emphasis,
    figurative,
    link,
    note,
    illustration,
    js,
    kw,
    v,
    f,
    c,
    p,
    lt,
    cm,
    code,
} = s;


exports = module.exports = new h.DocumentResource({
    Document : document([ `Як впихнути Bullet Physics. `, `В браузер.`, `Через TypeScript. `, `З використанням npm.` ], {},
        section(`Про що взагалі йде мова?`, ...[
            paragraph(...[
                sentence(`Деколи хочеться намалювати в браузері гарну інтерактивну сцену з реалістичною тривимірною фізикою. `),
                sentence(`Також, при цьому деколи хочеться писати код на TypeScript. `),
                sentence(`Ще рідше виникає потреба разом з цим використовувати npm для управління пакетами. `),
                sentence(`Ну і на десерт, деколи виникає потреба в симуляції м'яких тіл або нестандартної геометрії, які не завжди мають підтримку у рушіях фізики, принаймні для JavaScript. `),
            ]),
            paragraph(...[
                sentence(`У цій маленькій статті я розповім що робити, якщо всі ці "хочу" раптом перетнулись. `),
                sentence(`Ми створимо невелику демонстраційну сцену з Bullet Physics у ролі фізичного рушія та three.js у ролі графічного. `),
                sentence(`Також ми будемо використовувати TypeScript для написання коду замість JavaScript та npm у ролі пакетного менеджера. `),
                sentence(`В решті-решт, весь написаний код буде запакований за допомогою browserify та використаний в простій html сторінці. `),
                sentence(`Сама ж сторінка буде надаватись простим express сервером на безплатному хостингу Heroku. `),
            ]),
        ]),
        section(`Репозиторій на GitHub.`, ...[
            paragraph(...[
                sentence(`Якщо ми хочемо мати можливість поділитись результатом нашої праці через інтернет - необхідно розмістити нашу сторінку на загальнодоступному сервері. `),
                sentence(`З іншого боку, якщо в майбутньому нам захочеться модифікувати сцену, експериментувати з нею та при цьому зберігати її проміжні версії - було б добре тримати наш код в git репозиторії. `),
                sentence(`Ми почнемо з того, що заведемо порожній репозиторій на github та клонуємо його в локальний каталог на нашому комп'ютері. `),
                sentence(`Коли ми закінчимо роботу, то саме з цього репозиторію можна буде підняти сайт на Heroku. `),
            ]),
            paragraph(...[
                sentence(`Важливо, що у цій статті ми не будемо розглядати нюанси роботи в git. `),
                sentence(`З іншого боку, робота з Heroku не потребує якихось особливих навичок окрім вміння pushати файли на github. `),
                sentence(`Для подальшої ж роботи Heroku достатньо мати git репозиторій з необхідними файлами, а решту він зробить за нас. `),
            ]),
        ]),
        section(`Налаштовуємо npm.`, ...[
            paragraph(...[
                sentence(`Аби не збирати вручну всі пакети, потрібні для роботи серверу та сторінки, ми будемо використовувати npm. `),
                sentence(`І почнемо ми з того, що створимо package.json необхідний для його роботи. `),
                sentence(`Також для цього потрібно встановити Node.js, якщо його у вас немає. `),
            ]),
            paragraph(...[
                sentence(`Отож, після того як git репозиторій створено та клоновано, необхідно відкрити його кореневий каталог в середовищі розробки (наприклад, Visual Studio Code) або терміналі. `),
                sentence(`Далі ми створимо package.json набравши в консолі npm init -y:`),
            ]),
            illustration(``, code(`json`, ...[
                [ `{` ],
                [ `  "name": "demo",` ],
                [ `  "version": "1.0.0",` ],
                [ `  "description": "",` ],
                [ `  "main": "index.js",` ],
                [ `  "scripts": {` ],
                [ `    "test": "echo \\"Error: no test specified\\" && exit 1"` ],
                [ `  },` ],
                [ `  "keywords": [],` ],
                [ `  "author": "",` ],
                [ `  "license": "ISC"` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Файл package.json буде слугувати базою даних для залежностей, які ми використовуємо в нашому проекті. `),
                sentence(`Зокрема, це будуть необхідні нам пакети з npm, а також сценарії для збірки проекту, стартування сервера та іншого. `),
            ]),
        ]),
        section(`Налаштовуємо TypeScript.`, ...[
            paragraph(...[
                sentence(`Як вже згадувалось вище, код ми будемо писати на TypeScript. `),
                sentence(`Оскільки ні сервер на Node.js, ні браузер на стороні користувача не підтримують TypeScript, нам доведеться перекладати його на JavaScript. `),
                sentence(`Для цього, за допомогою npm i -D typescript ми встановимо з терміналу одноіменний пакет npm, який містить у собі транслятор TypeScript. `),
            ]),
            // тут про node_modules та package_lock.json
            paragraph(...[
                sentence(`Транслятор TypeScript потребує налаштування. `),
                sentence(`Зокрема, йому потрібна інформація про каталоги з сирцевим кодом, середовище, в якому виконуватиметься вихідний JavaScript код, його версію та інше. `),
                sentence(`Якщо цю конфігурацію задати у вигляді файлу tsconfig.json, то її також зможе використовувати середовище розробки для автодоповнення та іншої допомоги при роботі з кодом. `),
            ]),
            paragraph(...[
                sentence(`Для початку ми створимо шаблонний tsconfig.json зі стандартними налаштуваннями і приведемо його до потрібного нам вигляду. `),
                sentence(`Для цього наберемо в терміналі npx tsc --init, після чого в кореневій папці буде згенеровано tsconfig.json. `),
            ]),
            illustration(``, code(`json`, ...[
                [ `{` ],
                [ `  "compilerOptions": {` ],
                [ `    /* Visit https://aka.ms/tsconfig.json to read more about this file */` ],
                [ `` ],
                [ `    /* Basic Options */` ],
                [ `    // "incremental": true,                   /* Enable incremental compilation */` ],
                [ `    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */` ],
                [ `    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */` ],
                [ `    // "lib": [],                             /* Specify library files to be included in the compilation. */` ],
                [ `    // "allowJs": true,                       /* Allow javascript files to be compiled. */` ],
                [ `    // "checkJs": true,                       /* Report errors in .js files. */` ],
                [ `    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */` ],
                [ `    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */` ],
                [ `    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */` ],
                [ `    // "sourceMap": true,                     /* Generates corresponding '.map' file. */` ],
                [ `    // "outFile": "./",                       /* Concatenate and emit output to single file. */` ],
                [ `    // "outDir": "./",                        /* Redirect output structure to the directory. */` ],
                [ `    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */` ],
                [ `    // "composite": true,                     /* Enable project compilation */` ],
                [ `    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */` ],
                [ `    // "removeComments": true,                /* Do not emit comments to output. */` ],
                [ `    // "noEmit": true,                        /* Do not emit outputs. */` ],
                [ `    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */` ],
                [ `    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */` ],
                [ `    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */` ],
                [ `` ],
                [ `    /* Strict Type-Checking Options */` ],
                [ `    "strict": true,                           /* Enable all strict type-checking options. */` ],
                [ `    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */` ],
                [ `    // "strictNullChecks": true,              /* Enable strict null checks. */` ],
                [ `    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */` ],
                [ `    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */` ],
                [ `    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */` ],
                [ `    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */` ],
                [ `    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */` ],
                [ `` ],
                [ `    /* Additional Checks */` ],
                [ `    // "noUnusedLocals": true,                /* Report errors on unused locals. */` ],
                [ `    // "noUnusedParameters": true,            /* Report errors on unused parameters. */` ],
                [ `    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */` ],
                [ `    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */` ],
                [ `` ],
                [ `    /* Module Resolution Options */` ],
                [ `    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */` ],
                [ `    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */` ],
                [ `    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */` ],
                [ `    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */` ],
                [ `    // "typeRoots": [],                       /* List of folders to include type definitions from. */` ],
                [ `    // "types": [],                           /* Type declaration files to be included in compilation. */` ],
                [ `    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */` ],
                [ `    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */` ],
                [ `    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */` ],
                [ `    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */` ],
                [ `` ],
                [ `    /* Source Map Options */` ],
                [ `    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */` ],
                [ `    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */` ],
                [ `    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */` ],
                [ `    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */` ],
                [ `` ],
                [ `    /* Experimental Options */` ],
                [ `    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */` ],
                [ `    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */` ],
                [ `` ],
                [ `    /* Advanced Options */` ],
                [ `    "skipLibCheck": true,                     /* Skip type checking of declaration files. */` ],
                [ `    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */` ],
                [ `  }` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Окрім важливих для нас налаштувань файл буде містити й деякі інші закоментовані опції, це нормально. `),
                // додати нотатку про те, що коментарі в tsconfig.json допустимі
                sentence(`Оскільки у нас буде два набори коду - для сервера та для клієнта - нам потрібні дві конфігурації. `),
                sentence(`Ми будемо починати з серверного коду, тому для початку створимо каталог src/server та перемістимо згенерований tsconfig.json туди. `),
            ]),
            paragraph(...[
                sentence(`Далі, ми додамо до налаштувань шлях до каталогу з кодом для сервера. `),
                sentence(`Для цього, додамо в кореневий об'єкт поле include зі значенням [ "./" ]. `),
                sentence(`Воно буде говорити про те, що всі необхідні файли з кодом лежать в тому ж каталозі що і tsconfig.json. `),
                sentence(`Після цього, розкоментуємо поле compilerOptions.outDir і визначимо його як "../../dist/server". `),
                sentence(`Це вкаже транслятору куди необхідно помістити вихідні файли JavaScript відносно tsconfig.json, а саме в каталог dist/server. `),
            ]),
            paragraph(...[
                sentence(`На цьому етапі у нас вже є можливість транслювати код для сервера та запустити його. `),
                sentence(`Для цього створимо порожній файл src/server/server.ts і запишемо в нього console.log("hello, typescript");. `),
                sentence(`Далі, набираємо в терміналі команду npx tsc -p src/server, після чого повинен з'явитись каталог dist/server з відповідним server.js файлом. `),
                sentence(`Його ми і будемо запускати за допомогою команди node dist/server/server.js. `),
                sentence(`Якщо все зроблено правильно, то після введення команди в терміналі повинно з'явитись повідомлення hello, typescript. `),
            ]),
            // тут про те, що каталог dist треба ігнорувати та про те, що це та точка, де можна перевірити чи ми правильно налаштували typescript, що важливо для браузерного коду
        ]),
        section(`Налаштовуємо express.`, ...[
            paragraph(...[
                sentence(`Для роботи сервера ми використаємо express - популярний пакет npm. `),
                sentence(`Встановити його можна за допомогою команди npm i express. `),
                // зауважити, що express потрібно встановлювати *не* як devDependency
                sentence(`Оскільки цей пакет в першу чергу призначений для JavaScript, він не містить файлів d.ts, які необхідні TypeScript для проведення контролю типів. `),
                sentence(`Аби працювати з ним, ми встановимо ще один пакет-адаптер, набравши в консолі npm i -D @types/express. `),
            ]),
            paragraph(...[
                sentence(`Відтепер ми вже можемо завантажити express всередині server.ts. `),
                sentence(`Ми не будемо особливо розбирати сам express і принципи його роботи, оскільки це виходить за межі даної статті. `),
                sentence(`Але це і не потрібно, оскільки єдине що нам потрібно від нього - це запустити сервер, який би роздавав клієнтам необхідні ресурси: html та js файли, зображення, моделі та інше. `),
                sentence(`Для цього ми вкажемо express шлях до каталогу в якому знаходяться усі "публічні" файли, до яких може вільно звертатись корситувач. `),
            ]),
            illustration(``, js(...[
                [ `import path from "path";` ],
                [ `import express from "express";` ],
                [ `` ],
                [ `const app = express();` ],
                [ `` ],
                [ `app.use(express.static(path.join(__dirname, "../../public")));` ],
                [ `app.listen(8080);` ],
            ])),
            paragraph(...[
                sentence(`Якщо коротко, комбінація app.use(express.static(...)) вкаже express де шукати файли при зверненні до сервера, а app.listen(8080) запустить сервер, який буде прослуховувати localhost:8080. `),
                sentence(`Тепер можна зібрати проект за допомогою npx tsc -p src/server та запустити сервер через node dist/server/server.js. `),
                sentence(`Коли сервер працює, за адресою localhost:8080 в браузері можна звертатись до усіх файлів що розміщені в каталозі public. `),
                sentence(`Але у нас досі немає файлів до яких можна звератись... `),
            ]),
            paragraph(...[
                sentence(`Тепер, коли сервер вже здатний надсилати користувачам файли, можна створити домашню сторінку - index.html - всередині каталогу public. `),
                sentence(`Необхідно наповнити її базовою розміткою, аби браузер міг коректно її відобразити. `),
            ]),
            illustration(``, code(`html`, ...[
                [ `<!DOCTYPE html>` ],
                [ `<html lang="en">` ],
                [ `    <head>` ],
                [ `        <meta charset="utf-8">` ],
                [ `        <title>Physics demo</title>` ],
                [ `    </head>` ],
                [ `    <body>` ],
                [ `    </body>` ],
                [ `</html>` ],
            ])),
        ]),
        section(`Налаштовуємо browserify.`, ...[
            paragraph(...[
                sentence(`Саме час перейти до написання коду, який буде виконуватись безпосередньо на стороні клієнта - у браузері. `),
                sentence(`Для цього, створюємо каталог src/client та розміщуємо в ньому файл client.ts. `),
                sentence(`Поки що, у цьому файлі ми будемо лише виводити на консоль повідомлення, щойно тіло сторінки буде завантажено. `),
            ]),
            illustration(``, js(...[
                [ `window.addEventListener("load", main);` ],
                [ `` ],
                [ `async function main() {` ],
                [ `    console.log("done");` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Також потрібно створити копію конфігурації для typescript - tsconfig.json. `),
                sentence(`Її слід розмістити в каталозі src/client, поле compilerOptions.outDir замінити на відповідне "../../dist/client", а у список бібліотек - compilerOptions.lib - потрібно додати "DOM", аби typescript міг працювати з функціоналом браузера. `),
                sentence(`Тепер, якщо виконати у терміналі команду npx tsc -p src/client наш клієнтський код буде перекладений на JavaScript та розміщений у відповідному каталозі. `),
            ]),
            paragraph(...[
                sentence(`Але цього все ще мало для того, щоб ми могли рухатись далі. `),
                sentence(`Для того аби використовувати пакети npm в браузері - нам необхідно помирити модулі npm з тим підходом до роботи з кодом, який використовує браузер. `),
                sentence(`Для цього ми застосуємо browserify - інструмент, що дозволить запакувати весь наш код та його залежності в єдиний файл, який в подальшому вже можна буде додати до сторінки. `),
            ]),
            paragraph(...[
                sentence(`Для початку ми встановимо потрібний пакет за допомогою команди npm i -D browserify. `),
                sentence(`Тепер за допомогою browserify можна запакувати весь необхідний код, включаючи залежності у вигляді пакетів npm, в єдиний файл. `),
                sentence(`Для цього необхідно після перекладу typescript виконати команду npx browserify dist/client/client.js -o public/bundle.js. `),
                sentence(`Вона запакує всі залежності у файл public/bundle.js, який ми додамо до сторіки за допомогою тегу <script src="./bundle.js"></script>.`),
            ]),
        ]),
        section(`Налаштовуємо сценації.`, ...[
            paragraph(...[
                sentence(`Не важко помітити, що робота з командною стрічкою може бути вельми дратівливою і схильною до помилок. `),
                sentence(`Тому є сенс в тому, щоб загорнути всі необхідні дії в набір сценаріїв всередині файлу package.json. `),
                sentence(`Загалом нам потрібні лише два сценарії: один для збірки проекту, а другий для запуску. `),
                sentence(`Також це знадобиться на етапі інтеграції з Heroku, але про це трохи згодом. `),
            ]),
            paragraph(...[
                sentence(`Ми почнемо з простішого сценарію: запуску сервера. `),
                sentence(`Для цього у полі scripts файлу package.json ми додамо поле "start" : "node dist/server/server.js". `),
                sentence(`Не важко здогадатись, що воно виконуватиме все те, що до цього ми робили використовуючи командну стрічку. `),
                sentence(`Основна відмінність - коротша форма запису, замість node dist/server/server.js тепер можна виконати команду npm start. `),
                sentence(`З другим сценарієм трохи важче. `),
                sentence(`Для початку згадаємо що саме і в якому порядку він повинен робити:`),
            ]),
            list(...[
                `Перекласти код сервера. `,
                `Перекласти код клієна. `,
                `Запакувати перекладений код клієнта. `,
            ]),
            paragraph(...[
                sentence(`Цей сценарій буде називатись build і виконуватиме одразу всі перераховані вище завдання. `),
                sentence(`Приємним бонусом виступає те, що оскільки всі команди будуть виконуватись через npm, префікс npx тепер писати не обов'язково. `),
                sentence(`Таким чином, ми отримаємо наступну стрічку: tsc -p src/server && tsc -p src/client && browserify dist/client/client.js -o public/bundle.js. `),
                sentence(`Ще варто зазначити, що оскільки build не є стандартним сценарієм npm, його запуск повинен відбуватись з використанням команди run, тобто як npm run build. `),
            ]),
            paragraph(...[
                sentence(`Таким чином, для повторної збірки проекту нам достатньо виконати npm run build, а для запуску сервера - npm start. `),
                sentence(`При цьому, якщо ми не змінювали код сервера - нам не потрібно його зупиняти і повторного стартувати. `),
            ]),
        ]),
        section(`Налаштовуємо three.js.`, ...[
            paragraph(...[
                sentence(`На цьому етапі легка частина роботи подолана. `),
                sentence(`Саме час додати three.js - пакет npm для виводу графіки. `),
                sentence(`Зробити це можна за допомогою команди npm i -D three. `),
                sentence(`Далі потрібно завантажити пакет на стороні клієнта та створити WebGLRenderer - компонент, який буде виводити зображення. `),
                sentence(`Цей вивід буде відбуватись в елемент <canvas>, який ми додамо в тіло сторінки. `),
                sentence(`Також потрібно зробити деякі налаштування, зокрема, налаштувати розміри виводу та кодування кольору. `),
            ]),
            illustration(``, js(...[
                [ `const renderer = new three.WebGLRenderer;` ],
                [ `const canvas = renderer.domElement;` ],
                [ `` ],
                [ `document.body.appendChild(canvas);` ],
                [ `` ],
                [ `const { width, height } = canvas.getBoundingClientRect();` ],
                [ `` ],
                [ `renderer.setPixelRatio(window.devicePixelRatio);` ],
                [ `renderer.outputEncoding = three.sRGBEncoding;` ],
                [ `renderer.setSize(width, height);` ],
            ])),
        ]),
        section(`Наповнюємо сцену.`, ...[
            paragraph(...[
                sentence(`Тепер можна перейти до створення та наповнення сцени. `),
                sentence(`Сцена в three.js - це набір об'єктів, джерел світла та усього іншого, що повинне бути виведене на екран. `),
                sentence(`Сцена виводиться з ракурсу певної камери - окремого об'єкта, який вказує де розташований і як повернутий спостерігач. `),
                sentence(`При створенні, потрібно вказати кут огляду камери (у нашому випадку це 70°), співвідношення сторін, а також мінімальну та максимальну відстані, на яких потрібно відображати об'єкти. `),
                sentence(`Ми розмістимо камеру над сценою та позаду неї`, note(`Вісь Z в three.js обернена, тому аби розмістити об'єкт "позаду" - необхідно збільшити його координату Z. `), `, а також повернемо її під кутом 45°`, note(`Кути в three.js задаються в радіанах, тому ми змушені перетворювати градуси, ділячи їх на 180° та множачи на π. `), `. `),
            ]),
            illustration(``, js(...[
                [ `const scene = new three.Scene;` ],
                [ `const camera = new three.PerspectiveCamera(70, width / height, 0.1, 100);` ],
                [ `` ],
                [ `camera.position.set(0, 5, 5);` ],
                [ `camera.rotation.set(-45 / 180 * Math.PI, 0, 0);` ],
            ])),
            paragraph(...[
                sentence(`Тепер потрібно додати об'єкти та джерела світла для відображення. `),
                sentence(`Для початку ми створимо невелику платформу, яка слугуватиме поверхнею для нашої сцени. `),
                sentence(`Це буде паралелепіпед зі сторонами 10х10 одиниць та висотою в 1 одиницю. `),
                sentence(`Він буде розташовуватись на висоті -0.5 одиниць, аби його верхній край був рівно в центрі координат.`),
                sentence(`Також ми додамо точкове дрежело світла, аби нашу платформу можна було побачити. `),
                sentence(`Радіус цього джерела буде рівний 10, а розташовуватись воно буде на висоті 5 одиниць, таким чином повністю освітлюючи всю сцену. `),
            ]),
            illustration(``, js(...[
                [ `const ground = new three.Mesh(` ],
                [ `    new three.BoxGeometry(10, 1, 10),` ],
                [ `    new three.MeshStandardMaterial,` ],
                [ `);` ],
                [ `` ],
                [ `ground.position.set(0, -0.5, 0);` ],
                [ `scene.add(ground);` ],
                [ `` ],
                [ `const light = new three.PointLight("white", 1, 10);` ],
                [ `` ],
                [ `light.position.set(0, 5, 0);` ],
                [ `scene.add(light);` ],
            ])),
            paragraph(...[
                sentence(`Останнє що потрібно зробити на цьому етапі - це вивести сцену на екран. `),
                sentence(`Для цього ми використаємо функцію requestAnimationFrame, яка надішле браузеру запит викликати передану в неї функцію, щойно той надумає оновлювати екран. `),
                sentence(`Всередині цієї функції, вже після виводу, ми повторно викличемо requestAnimationFrame, таким чином утворивши нескінченну петлю що буде оновлювати зображення на кожному кадрі. `),
            ]),
            illustration(``, js(...[
                [ `function render() {` ],
                [ `    renderer.render(scene, camera);` ],
                [ `    ` ],
                [ `    requestAnimationFrame(render);` ],
                [ `}` ],
                [ `` ],
                [ `requestAnimationFrame(render);` ],
            ])),
            paragraph(...[
                sentence(`Якщо все зроблено правильно - ми впорались з графічною частиною. `),
                sentence(`В майнутньому ми ще повернемось до неї, аби внести незначні правки, а зараз можна зайнятись фізикою. `),
            ]),
        ]),
        section(`Налаштовуємо ammojs-typed.`, ...[
            paragraph(...[
                sentence(`Для симуляції фізики твердих тіл ми будемо викорситовувати відкритий фізичний рушій Bullet Physics. `),
                sentence(`Хоча сам він написаний на С++, існує його версія для JavaScript, згенерована за допомогою emscripten - бібліотека ammo.js. `),
                sentence(`Але як і у випадку з express, ammo.js в першу чергу призначений для JavaScript і не містить опису типів, потрібних для TypeScript. `),
            ]),
            paragraph(...[
                sentence(`Взагалі, це дуже поширена проблема, коли відповідного TypeScript аналога для потрібної JavaScript бібліотеки не існує. `),
                sentence(`Але нам пощастило. `),
                sentence(`Добрий дядько `, link(`giniedp`, `https://github.com/giniedp`), ` створив `, link(`ammojs-typed`, `https://www.npmjs.com/package/ammojs-typed`), ` - пакет для npm який уже містить усі потрібні файли аннотацій d.ts. `),
                sentence(`Якщо ви не гівнюк - перейдіть до його `, link(`github репозиторію`, `https://github.com/giniedp/ammojs-typed`), ` і поставте зірочку. `),
            ]),
            paragraph(...[
                sentence(`Ми додамо цей пакет, виконавши команду npm i -D ammojs-typed в терміналі. `),
                sentence(`Далі, необхідно також завантажити його на стороні клієнта та виконати завантаження ammojs. `),
                sentence(`Функція Ammo що експортується з ammojs-typed повертає Promise. `),
                sentence(`Дочекавшись його через await ми отримаємо робочий екземпляр бібліотеки, за допомогою якого і будемо створювати тіла для симуляції. `),
            ]),
        ]),
        section(`Налаштовуємо фізичний світ. `, ...[
            paragraph(...[
                sentence(`Оскільки бібліотека ammojs-typed є прямим клоном Bullet Physics на TypeScript, уся необхідна документація може бути знайдена на сайті bullet або в інтернеті. `),
                sentence(`Першим нашим кроком буде створення фізичного світу, яке, проте, не є тривіальним. `),
                sentence(`Власне, це досить складний процес, який сильно залежить від призначення нашої симуляції. `),
                sentence(`Тому я навмисне пропущу його детальний опис та просто приведу приклад шаблонного коду для створення світу. `),
            ]),
            illustration(``, js(...[
                [ `const collisionConfiguration = new ammo.btDefaultCollisionConfiguration;` ],
                [ `const world = new ammo.btDiscreteDynamicsWorld(` ],
                [ `    new ammo.btCollisionDispatcher(collisionConfiguration),` ],
                [ `    new ammo.btDbvtBroadphase,` ],
                [ `    new ammo.btSequentialImpulseConstraintSolver,` ],
                [ `    collisionConfiguration,` ],
                [ `);` ],
                [ `` ],
                [ `world.setGravity(new ammo.btVector3(0, -1, 0));` ],
            ])),
            paragraph(...[
                sentence(`Тепер, коли у нас є екземпляр світу, можна додавати в нього тіла для симуляції. `),
                sentence(`Тверде тіло в ammo представлене класом ammo.btRigidBody і при створенні описується структурою ammo.btRigidBodyConstructionInfo. `),
                sentence(`Остання включає в себе інформацію про рух тіла, його форму, масу та інерцію. `),
                sentence(`Для розрахунку усього цього ми почнемо зі створення ammo.btTransform, який описує положення та орієнтацію тіла в просторі. `),
                sentence(`Оскільки наша поверхня це паралелепіпед з розмірами 10х1х10, зсунутий по осі Y на -0.5, ми повинні відтворити ці перетворення на створеній трансформації. `),
                sentence(`Для цього ми занулимо її викликавши transform.setIdentity(), після чого пересунемо на потрібну позицію через transform.setOrigin(new ammo.btVector3(0, -0.5, 0)). `),
            ]),
            paragraph(...[
                sentence(`Далі потрібно створити форму для тіла, в нашому випадку - паралелепіпед. `),
                sentence(`Для такої форми в ammo є вбудований клас - ammo.btBoxShape, який приймає у якості параментів половину розміру тіла. `),
                sentence(`Отримавши форму, потрібно розрахувати для неї інерцію за допомогою методу calculateLocalInertia. `),
                sentence(`Оскільки наше тіло повинне бути статичне і нерухоме ми встановлюємо його массу як нульову. `),
                sentence(`Після цього, ми можемо створити тіло з усіма розрахованими параметрами і додати його у світ. `),
            ]),
            illustration(``, js(...[
                [ `const transform = new ammo.btTransform();` ],
                [ `` ],
                [ `transform.setIdentity();` ],
                [ `transform.setOrigin(new ammo.btVector3(0, -0.5, 0));` ],
                [ `` ],
                [ `const shape = new ammo.btBoxShape(new ammo.btVector3(5, 0.5, 5));` ],
                [ `const mass = 0;` ],
                [ `const inertia = new ammo.btVector3(0, 0, 0);` ],
                [ `` ],
                [ `shape.calculateLocalInertia(mass, inertia);` ],
                [ `` ],
                [ `const motion = new ammo.btDefaultMotionState(transform);` ],
                [ `const body = new ammo.btRigidBody(new ammo.btRigidBodyConstructionInfo(mass, motion, shape, inertia));` ],
                [ `` ],
                [ `world.addRigidBody(body);` ],
            ])),
        ]),
        section(`Класи. `, ...[
            paragraph(...[
                sentence(`Оскільки далі ми будемо створювати багато об'єктів у кожного з яких буде своє графічне та фізичне представлення, було б добре обгорнути усе це в класи. `),
                sentence(`Тому вже існуючий код для створення поверхні ми перепишемо, перемістивши всю роботу зі створення в конструктор. `),
            ]),
            illustration(``, js(...[
                [ `class Ground {` ],
                [ `    public constructor() {` ],
                [ `        const ground = new three.Mesh(` ],
                [ `            new three.BoxGeometry(10, 1, 10),` ],
                [ `            new three.MeshStandardMaterial,` ],
                [ `        );` ],
                [ `    ` ],
                [ `        ground.position.set(0, -0.5, 0);` ],
                [ `        scene.add(ground);` ],
                [ `        ` ],
                [ `        const transform = new ammo.btTransform();` ],
                [ `    ` ],
                [ `        transform.setIdentity();` ],
                [ `        transform.setOrigin(new ammo.btVector3(0, -0.5, 0));` ],
                [ `    ` ],
                [ `        const shape = new ammo.btBoxShape(new ammo.btVector3(5, 0.5, 5));` ],
                [ `        const mass = 0;` ],
                [ `        const inertia = new ammo.btVector3(0, 0, 0);` ],
                [ `    ` ],
                [ `        shape.calculateLocalInertia(mass, inertia);` ],
                [ `    ` ],
                [ `        const motion = new ammo.btDefaultMotionState(transform);` ],
                [ `        const body = new ammo.btRigidBody(new ammo.btRigidBodyConstructionInfo(mass, motion, shape, inertia));` ],
                [ `    ` ],
                [ `        world.addRigidBody(body);` ],
                [ `    }` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Тепер можна створити клас для динамічного об'єкта - куба зі стороною в 1 одиницю. `),
                sentence(`Його код не буде сильно відрізнятись від коду для поверхні, ми лише додамо поля та методи для оновлення його розташування з плином часу. `),
            ]),
            illustration(``, js(...[
                [ `class Box {` ],
                [ `    private object : three.Object3D;` ],
                [ `    private body : Ammo.btRigidBody;` ],
                [ `` ],
                [ `    public constructor() {` ],
                [ `        const object = new three.Mesh(` ],
                [ `            new three.BoxGeometry(1, 1, 1),` ],
                [ `            new three.MeshStandardMaterial,` ],
                [ `        );` ],
                [ `    ` ],
                [ `        object.position.set(0, 5, 0);` ],
                [ `        scene.add(object);` ],
                [ `` ],
                [ `        this.object = object;` ],
                [ `        ` ],
                [ `        const transform = new ammo.btTransform();` ],
                [ `    ` ],
                [ `        transform.setIdentity();` ],
                [ `        transform.setOrigin(new ammo.btVector3(0, 5, 0));` ],
                [ `    ` ],
                [ `        const shape = new ammo.btBoxShape(new ammo.btVector3(0.5, 0.5, 0.5));` ],
                [ `        const mass = 1;` ],
                [ `        const inertia = new ammo.btVector3(0, 0, 0);` ],
                [ `    ` ],
                [ `        shape.calculateLocalInertia(mass, inertia);` ],
                [ `    ` ],
                [ `        const motion = new ammo.btDefaultMotionState(transform);` ],
                [ `        const body = new ammo.btRigidBody(new ammo.btRigidBodyConstructionInfo(mass, motion, shape, inertia));` ],
                [ `    ` ],
                [ `        world.addRigidBody(body);` ],
                [ `` ],
                [ `        this.body = body;` ],
                [ `    }` ],
                [ `` ],
                [ `    public Update() {` ],
                [ `        const transform = this.body.getWorldTransform();` ],
                [ `        const position = transform.getOrigin();` ],
                [ `        ` ],
                [ `        this.object.position.set(position.x(), position.y(), position.z());` ],
                [ `        ` ],
                [ `        const rotation = transform.getRotation();` ],
                [ `        ` ],
                [ `        this.object.rotation.setFromQuaternion(new three.Quaternion(rotation.x(), rotation.y(), rotation.z(), rotation.w()));` ],
                [ `    }` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Остання деталь - це крок у симуляції фізики. `),
                sentence(`Використовуючи метод world.stepSimulation() на кожному кадрі ми будемо просувати симуляцію на 10 мілісекунд вперед. `),
                sentence(`Після цього розташування та повороти усіх доданих у світ тіл будуть змінені, і ми зможемо оновити їх графічні представлення за допомогою методу Update. `),
            ]),
            illustration(``, js(...[
                [ `function render() {` ],
                [ `    world.stepSimulation(10);` ],
                [ `    renderer.render(scene, camera);` ],
                [ `    ` ],
                [ `    box.Update();` ],
                [ `    ` ],
                [ `    requestAnimationFrame(render);` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Якщо на цьому етапі все зроблено правильно - на нашій сцені з'явиться куб, який повільно впаде на поверхню і відскочить від неї. `),
            ]),
        ]),
        section(`Покращуємо картинку.`, ...[
            paragraph(...[
                sentence(`Спостерігати за один єдиним кубом не надто цікаво. `),
                sentence(`Тому ми створимо йому компанію з 99-ти кубів, які будуть мати випадкові розміри та розташування. `),
                sentence(`Для цього доведеться змінити код, який відповідає за створення об'єкта та тіла. `),
            ]),
            illustration(``, js(...[
                [ `const size = new ammo.btVector3(` ],
                [ `    0.1 + Math.random() * 0.6,` ],
                [ `    0.1 + Math.random() * 0.6,` ],
                [ `    0.1 + Math.random() * 0.6,` ],
                [ `);` ],
                [ `const object = new three.Mesh(` ],
                [ `    new three.BoxGeometry(` ],
                [ `        size.x() * 2,` ],
                [ `        size.y() * 2,` ],
                [ `        size.z() * 2,` ],
                [ `    ),` ],
                [ `    new three.MeshStandardMaterial,` ],
                [ `);` ],
                [ `...` ],
                [ `object.position.set(` ],
                [ `    -4 + Math.random() * 8,` ],
                [ `    2 + Math.random() * 8,` ],
                [ `    -4 + Math.random() * 8,` ],
                [ `);` ],
                [ `...` ],
                [ `transform.setOrigin(new ammo.btVector3(` ],
                [ `    object.position.x,` ],
                [ `    object.position.y,` ],
                [ `    object.position.z,` ],
                [ `));` ],
                [ `` ],
                [ `const shape = new ammo.btBoxShape(size);` ],
            ])),
            paragraph(...[
                sentence(`Також можна додати в сцену тіні і згладжування. `),
                sentence(`Останнє можна увімкнути передавши параметр { antialias : true } при створенні three.WebGLRenderer. `),
                sentence(`Тіні ж потрібно налаштувати в кількох місцях. `),
                sentence(`По-перше, при створенні того ж three.WebGLRenderer потрібно визначити параметри renderer.shadowMap.enabled та renderer.shadowMap.type як true та three.PCFSoftShadowMap відповідно. `),
                sentence(`По-друге, для кожного джерела світала потрібно увімкнути тіні (light.castShadow = true) та встановити їх розмір (light.shadow.mapSize.width = 2048 та light.shadow.mapSize.height = 2048). `),
                sentence(`По-третє, для кожного об'єкта потрібно увімкнути відкидання (object.castShadow = true) та сприйняття тіней (object.receiveShadow = true). `),
            ]),
            paragraph(...[
                sentence(`Залишилась ще одна деталь яку потрібно врахувати. `),
                sentence(`Частота зміни кадрів, грубо кажучи, не визначена. `),
                sentence(`Для того аби симуляція відбувалась плавно і не відставала та не випереджала реальний час - потрібно враховувати час що минув від останнього кадру. `),
                sentence(`Для цього ми будемо запам'ятовувати поточний час під час малювання та віднімати від нього поточний час на наступному кадрі. `),
            ]),
            illustration(``, js(...[
                [ `new Ground;` ],
                [ `` ],
                [ `const boxes : Array<Box> = [];` ],
                [ `` ],
                [ `for (let i = 0; i < 100; ++i) {` ],
                [ `    boxes.push(new Box);` ],
                [ `}` ],
                [ `` ],
                [ `let date = new Date;` ],
                [ `` ],
                [ `function render() {` ],
                [ `    const now = new Date;` ],
                [ `` ],
                [ `    world.stepSimulation(now.valueOf() - date.valueOf());` ],
                [ `    renderer.render(scene, camera);` ],
                [ `` ],
                [ `    for (const box of boxes) {` ],
                [ `        box.Update();` ],
                [ `    }` ],
                [ `` ],
                [ `    date = now;` ],
                [ `` ],
                [ `    requestAnimationFrame(render);` ],
                [ `}` ],
            ])),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
            ]),
        ]),
    ),
});
