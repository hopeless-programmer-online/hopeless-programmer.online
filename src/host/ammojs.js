const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    list,
    sentence,
    emphasis,
    figurative,
    link,
    note,
    illustration,
    js,
    kw,
    v,
    f,
    c,
    p,
    lt,
    cm,
    code,
} = s;


exports = module.exports = new h.DocumentResource({
    Document : document([ `Як впихнути Bullet Physics. `, `В браузер.`, `Через TypeScript. `, `З використанням npm.` ], {},
        section(`Про що взагалі йде мова?`, ...[
            paragraph(...[
                sentence(`Деколи хочеться намалювати в браузері гарну інтерактивну сцену з реалістичною тривимірною фізикою. `),
                sentence(`Також, при цьому деколи хочеться писати код на TypeScript. `),
                sentence(`Ще рідше виникає потреба разом з цим використовувати npm для управління пакетами. `),
                sentence(`Ну і на десерт, деколи виникає потреба в симуляції м'яких тіл або нестандартної геометрії, які не завжди мають підтримку у рушіях фізики, принаймні для JavaScript. `),
            ]),
            paragraph(...[
                sentence(`У цій маленькій статті я розповім що робити, якщо всі ці "хочу" раптом перетнулись. `),
                sentence(`Ми створимо невелику демонстраційну сцену з Bullet Physics у ролі фізичного рушія та three.js у ролі графічного. `),
                sentence(`Також ми будемо використовувати TypeScript для написання коду замість JavaScript та npm у ролі пакетного менеджера. `),
                sentence(`В решті-решт, весь написаний код буде запакований за допомогою browserify та використаний в простій html сторінці. `),
                sentence(`Сама ж сторінка буде надаватись простим express сервером на безплатному хостингу Heroku. `),
            ]),
        ]),
        section(`Репозиторій на GitHub.`, ...[
            paragraph(...[
                sentence(`Якщо ми хочемо мати можливість поділитись результатом нашої праці через інтернет - необхідно розмістити нашу сторінку на загальнодоступному сервері. `),
                sentence(`З іншого боку, якщо в майбутньому нам захочеться модифікувати сцену, експериментувати з нею та при цьому зберігати її проміжні версії - було б добре тримати наш код в git репозиторії. `),
                sentence(`Ми почнемо з того, що заведемо порожній репозиторій на github та клонуємо його в локальний каталог на нашому комп'ютері. `),
                sentence(`Коли ми закінчимо роботу, то саме з цього репозиторію можна буде підняти сайт на Heroku. `),
            ]),
            paragraph(...[
                sentence(`Важливо, що у цій статті ми не будемо розглядати нюанси роботи в git. `),
                sentence(`З іншого боку, робота з Heroku не потребує якихось особливих навичок окрім вміння pushати файли на github. `),
                sentence(`Для подальшої ж роботи Heroku достатньо мати git репозиторій з необхідними файлами, а решту він зробить за нас. `),
            ]),
        ]),
        section(`Налаштовуємо npm.`, ...[
            paragraph(...[
                sentence(`Аби не збирати вручну всі пакети, потрібні для роботи серверу та сторінки, ми будемо використовувати npm. `),
                sentence(`І почнемо ми з того, що створимо package.json необхідний для його роботи. `),
                sentence(`Також для цього потрібно встановити Node.js, якщо його у вас немає. `),
            ]),
            paragraph(...[
                sentence(`Отож, після того як git репозиторій створено та клоновано, необхідно відкрити його кореневий каталог в середовищі розробки (наприклад, Visual Studio Code) або терміналі. `),
                sentence(`Далі ми створимо package.json набравши в консолі npm init -y:`),
            ]),
            illustration(``, code(`json`, ...[
                [ `{` ],
                [ `  "name": "demo",` ],
                [ `  "version": "1.0.0",` ],
                [ `  "description": "",` ],
                [ `  "main": "index.js",` ],
                [ `  "scripts": {` ],
                [ `    "test": "echo \\"Error: no test specified\\" && exit 1"` ],
                [ `  },` ],
                [ `  "keywords": [],` ],
                [ `  "author": "",` ],
                [ `  "license": "ISC"` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Файл package.json буде слугувати базою даних для залежностей, які ми використовуємо в нашому проекті. `),
                sentence(`Зокрема, це будуть необхідні нам пакети з npm, а також сценарії для збірки проекту, стартування сервера та іншого. `),
            ]),
        ]),
        section(`Налаштовуємо TypeScript.`, ...[
            paragraph(...[
                sentence(`Як вже згадувалось вище, код ми будемо писати на TypeScript. `),
                sentence(`Оскільки ні сервер на Node.js, ні браузер на стороні користувача не підтримують TypeScript, нам доведеться перекладати його на JavaScript. `),
                sentence(`Для цього, за допомогою npm i -D typescript ми встановимо з терміналу одноіменний пакет npm, який містить у собі транслятор TypeScript. `),
            ]),
            // тут про node_modules та package_lock.json
            paragraph(...[
                sentence(`Транслятор TypeScript потребує налаштування. `),
                sentence(`Зокрема, йому потрібна інформація про каталоги з сирцевим кодом, середовище, в якому виконуватиметься вихідний JavaScript код, його версію та інше. `),
                sentence(`Якщо цю конфігурацію задати у вигляді файлу tsconfig.json, то її також зможе використовувати середовище розробки для автодоповнення та іншої допомоги при роботі з кодом. `),
            ]),
            paragraph(...[
                sentence(`Для початку ми створимо шаблонний tsconfig.json зі стандартними налаштуваннями і приведемо його до потрібного нам вигляду. `),
                sentence(`Для цього наберемо в терміналі npx tsc --init, після чого в кореневій папці буде згенеровано tsconfig.json. `),
            ]),
            illustration(``, code(`json`, ...[
                [ `{` ],
                [ `  "compilerOptions": {` ],
                [ `    /* Visit https://aka.ms/tsconfig.json to read more about this file */` ],
                [ `` ],
                [ `    /* Basic Options */` ],
                [ `    // "incremental": true,                   /* Enable incremental compilation */` ],
                [ `    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */` ],
                [ `    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */` ],
                [ `    // "lib": [],                             /* Specify library files to be included in the compilation. */` ],
                [ `    // "allowJs": true,                       /* Allow javascript files to be compiled. */` ],
                [ `    // "checkJs": true,                       /* Report errors in .js files. */` ],
                [ `    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */` ],
                [ `    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */` ],
                [ `    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */` ],
                [ `    // "sourceMap": true,                     /* Generates corresponding '.map' file. */` ],
                [ `    // "outFile": "./",                       /* Concatenate and emit output to single file. */` ],
                [ `    // "outDir": "./",                        /* Redirect output structure to the directory. */` ],
                [ `    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */` ],
                [ `    // "composite": true,                     /* Enable project compilation */` ],
                [ `    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */` ],
                [ `    // "removeComments": true,                /* Do not emit comments to output. */` ],
                [ `    // "noEmit": true,                        /* Do not emit outputs. */` ],
                [ `    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */` ],
                [ `    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */` ],
                [ `    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */` ],
                [ `` ],
                [ `    /* Strict Type-Checking Options */` ],
                [ `    "strict": true,                           /* Enable all strict type-checking options. */` ],
                [ `    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */` ],
                [ `    // "strictNullChecks": true,              /* Enable strict null checks. */` ],
                [ `    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */` ],
                [ `    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */` ],
                [ `    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */` ],
                [ `    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */` ],
                [ `    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */` ],
                [ `` ],
                [ `    /* Additional Checks */` ],
                [ `    // "noUnusedLocals": true,                /* Report errors on unused locals. */` ],
                [ `    // "noUnusedParameters": true,            /* Report errors on unused parameters. */` ],
                [ `    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */` ],
                [ `    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */` ],
                [ `` ],
                [ `    /* Module Resolution Options */` ],
                [ `    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */` ],
                [ `    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */` ],
                [ `    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */` ],
                [ `    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */` ],
                [ `    // "typeRoots": [],                       /* List of folders to include type definitions from. */` ],
                [ `    // "types": [],                           /* Type declaration files to be included in compilation. */` ],
                [ `    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */` ],
                [ `    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */` ],
                [ `    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */` ],
                [ `    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */` ],
                [ `` ],
                [ `    /* Source Map Options */` ],
                [ `    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */` ],
                [ `    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */` ],
                [ `    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */` ],
                [ `    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */` ],
                [ `` ],
                [ `    /* Experimental Options */` ],
                [ `    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */` ],
                [ `    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */` ],
                [ `` ],
                [ `    /* Advanced Options */` ],
                [ `    "skipLibCheck": true,                     /* Skip type checking of declaration files. */` ],
                [ `    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */` ],
                [ `  }` ],
                [ `}` ],
            ])),
            paragraph(...[
                sentence(`Окрім важливих для нас налаштувань файл буде містити й деякі інші закоментовані опції, це нормально. `),
                // додати нотатку про те, що коментарі в tsconfig.json допустимі
                sentence(`Оскільки у нас буде два набори коду - для сервера та для клієнта - нам потрібні дві конфігурації. `),
                sentence(`Ми будемо починати з серверного коду, тому для початку створимо каталог src/server та перемістимо згенерований tsconfig.json туди. `),
            ]),
            paragraph(...[
                sentence(`Далі, ми додамо до налаштувань шлях до каталогу з кодом для сервера. `),
                sentence(`Для цього, додамо в кореневий об'єкт поле include зі значенням [ "./" ]. `),
                sentence(`Воно буде говорити про те, що всі необхідні файли з кодом лежать в тому ж каталозі що і tsconfig.json. `),
                sentence(`Після цього, розкоментуємо поле compilerOptions.outDir і визначимо його як "../../dist/server". `),
                sentence(`Це вкаже транслятору куди необхідно помістити вихідні файли JavaScript відносно tsconfig.json, а саме в каталог dist/server. `),
            ]),
            paragraph(...[
                sentence(`На цьому етапі у нас вже є можливість транслювати код для сервера та запустити його. `),
                sentence(`Для цього створимо порожній файл src/server/server.ts і запишемо в нього console.log("hello, typescript");. `),
                sentence(`Далі, набираємо в терміналі команду npx tsc -p src/server, після чого повинен з'явитись каталог dist/server з відповідним server.js файлом. `),
                sentence(`Його ми і будемо запускати за допомогою команди node dist/server/server.js. `),
                sentence(`Якщо все зроблено правильно, то після введення команди в терміналі повинно з'явитись повідомлення hello, typescript. `),
            ]),
            // тут про те, що каталог dist треба ігнорувати та про те, що це та точка, де можна перевірити чи ми правильно налаштували typescript, що важливо для браузерного коду
        ]),
        section(`Налаштовуємо express.`, ...[
            paragraph(...[
                sentence(`Для роботи сервера ми використаємо express - популярний пакет npm. `),
                sentence(`Встановити його можна за допомогою команди npm i -D express. `),
                sentence(`Оскільки цей пакет в першу чергу призначений для JavaScript, він не містить файлів d.ts, які необхідні TypeScript для проведення контролю типів. `),
                sentence(`Аби працювати з ним, ми встановимо ще один пакет-адаптер, набравши в консолі npm i -D @types/express. `),
            ]),
            paragraph(...[
                sentence(`З цього моменту ми вже можемо завантажити express всередині server.ts. `),
                sentence(`Ми не будемо особливо розбирати сам express і принципи його роботи, оскільки це виходить за межі даної статті. `),
                sentence(`Єдине що нам потрібно від нього - це запустити сервер, який би роздавав клієнтам необхідні ресурси: html та js файли, зображення, моделі та інше. `),
                sentence(`Для цього ми вкажемо express шлях до каталогу в якому знаходяться усі "публічні" файли, до яких може вільно звертатись корситувач. `),
            ]),
            illustration(``, js(...[
                [ `import path from "path";` ],
                [ `import express from "express";` ],
                [ `` ],
                [ `const app = express();` ],
                [ `` ],
                [ `app.use(express.static(path.join(__dirname, "../../public")));` ],
                [ `app.listen(8080);` ],
            ])),
            paragraph(...[
                sentence(`Якщо коротко, комбінація app.use(express.static(...)) вкаже express де шукати файли при зверненні до сервера, а app.listen(8080) запустить сервер, який буде прослуховувати localhost:8080. `),
                sentence(`Тепер можна зібрати проект за допомогою npx tsc -p src/server та запустити сервер через node dist/server/server.js. `),
                sentence(`Коли сервер працює, за адресою localhost:8080 в браузері можна звертатись до усіх файлів що розміщені в каталозі public. `),
                sentence(`Але у нас досі немає файлів до яких можна звератись... `),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
    ),
});
