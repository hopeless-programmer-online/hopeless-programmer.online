const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    sentence,
    figurative,
    emphasis,
    link,
    lexeme,
    code,
    js,
    cs,
} = s;


const antimatter = `https://uk.wikipedia.org/wiki/%D0%90%D0%BD%D1%82%D0%B8%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%8F#%D0%A1%D0%B8%D0%BC%D0%B5%D1%82%D1%80%D1%96%D1%8F_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%97_%D1%96_%D0%B0%D0%BD%D1%82%D0%B8%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%97`;


exports = module.exports = new h.DocumentResource({
    Document : document([ `Думки вголос. `, `Порушення симетрії аргументів функції. ` ],
        {
        },
        section(`Асиметрія.`, ...[
            paragraph(...[
                sentence(`У той час як астрономи та фізики ламають голову над `, link(`порушенням симетрії`, antimatter),` між звичайною матерією та антиматерією, мені не дає спокою інший різновид порушення симетрії. `),
                sentence(`Мене непокоїть те, що функції зазвичай приймають багато аргументів, але повертають лише один результат. `),
                // sentence(`І це тупо, я не бачу для цього жодних вагомих підстав. `),
                sentence(`Хоча, здавалося б, немає підстав проводити між ними якусь вагому різницю. `),
            ]),
            paragraph(...[
                sentence(`Так от, концепція єдиного результату - це дуже тупо. `),
                sentence(`Я б навіть сказав, що це один з найпоказовіших прецедентів безпідставних та безглуздих особливостей як в колишніх, так і в сучасних мовах. `),
                sentence(`І зараз я поясню чому. `),
            ]),
        ]),
        /**
         * Якось до Конфуція в гості завітала дуже освідчена пані і спитала:
         *  - Поясність мені, мудрецю, чому коли у жінки багато коханців, то її цькують, а коли у чоловіка багато коханок, то його поважають?
         * Перш ніж відповісти Конфуцій завантажив термінал і почав набирати код на С++.
         *  - Скажи, - спитав він здивовану гостю, - коли функція приймає багато значень, це нормально?
         *  - Так, - відповіла жінка.
         *  - А коли функція повертає багато значень?
         *  - Теж нормально. Я ж пишу на пітоні.
         * Конфуцій розлютився і викрикнув:
         *  - Дурепа! Таку притчу зіпсувала!
         */
        section(`Про що взагалі мова?`, ...[
            paragraph(...[
                sentence(`Для прикладу візьмемо С++. `),
                sentence(`Функції у цій мові можуть приймати довільну кількість значень, але повертати здатні не більше ніж одне. `),
                sentence(`Ще цікаво те, що у випадку з аргументами зовсім не обов'язково вказувати їх відсутність. `),
                sentence(`Тобто існує можливість зробити це, використовуючи зарезервоване слово void, але змушувати вас ніхто не стане. `),
                sentence(`А от з результатом так не вийде: ви повинні або вказати його тип, або вказати void. `),
            ]),
            paragraph(...[
                sentence(`Власне, це одне з доволі частих запитань від новачків. `),
                sentence(`І в середовищі С++ існує принаймні два поширених підходи для повернення кількох значень. `),
                sentence(`Перший - це повертати з функції структуру з потрібною кількістю полів. `),
                sentence(`Це може бути, наприклад, std::tuple. `),
                sentence(`Другий підхід - використовувати так звані out-аргументи. `),
                sentence(`При цьому, до моменту виклику функції оголошується потрібна кількість змінних, а під час виклику їх адреси передаються в функцію як звичайні аргументи. `),
                sentence(`Під час своєї роботи функція змінює значення цих змінних або навіть ініціалізує їх, а після її виконання до цих "результатів" можна звернутись ззовні. `),
                // sentence(`Дивовижно, чи не так? `),
            ]),
            paragraph(...[
                sentence(`То в чому ж полягає тупість? `),
                sentence(`Ну хоча б тому, що це незручно та абсолютно несправедливо. `),
                sentence(`Отримання двох значень з функції вимагає додаткових зусиль, в той час як передача двох значень підтримується "з коробки". `),
                sentence(`Аргументують це по-різному, але я не знаю жодного аргументу, який би не можна було обернути проти... аргументів функції. `),
            ]),
            paragraph(...[
                sentence(`Єдине частково прийнятне виправдання для цього - історичне. `),
                sentence(`Математичні функції повертають один результат, тому й мови програмування цим грішать. `),
                sentence(`Але це також говорить і про те, що немає сенсу притримуватись цієї безпідставної практики. `),
                sentence(`Якщо концепція єдиного результату з'явилась випадково і необдумано, то ніхто не заважає викорінити її в будь-який момент. `),
            ]),
            // paragraph(...[
            //     sentence(`Але чому все склалось саме так? `),
            //     sentence(`Чому тоді "надлишкові" аргументи не передають в функцію за допомогою std::tuple? `),
            //     sentence(`Чому під один результат не створюють змінну та не передають її адресу в функцію? `),
            //     sentence(`Чому у функції не повинно бути рівно-одне вхідне значення і рівно одне-вихідне? `),
            //     sentence(`Можливо і вихідне значення не потрібне? `),
            //     sentence(`Чому б не обійтись лише одним-єдиним аргументом-структурою, який буде містити в собі і аргументи, і поля для результатів? `),
            //     sentence(`А можливо і це зайве, адже ж є глобальний стек... `),
            //     sentence(`Якщо всі дії виконувати через нього, то можна взагалі викликати функції без будь-яких аргументів чи результатів. `),
            // ]),
        ]),
        section(paragraph(`Повертайте структуру! `), ...[
            paragraph(...[
                sentence(`Це дуже частий аргумент, який гарно пояснює спосіб виходу з ситуації що склалась, але зовсім не пояснює її причину. `),
                sentence(`Власне, замість кількох результатів пропонується повертати структуру або клас. `),
                sentence(`Також, в залежності від мови і її насичення синтаксичним цукром, може знадобитись оголосити відповідні сутності. `),
                sentence(`В мовах без статичної типізації, таких як JavaScript, з цього взагалі не роблять проблему, адже навіть різниця в записі нікчемна. `),
            ]),
            paragraph(...[
                sentence(`Але чи справді на це варто закривати очі? `),
                sentence(`Чому таке ж правило не застосувати до аргументів функції? `),
                sentence(`Потрібно декілька аргументів - передавай їх структурою або масивом. `),
                sentence(`В такому випадку і симетрія буде збережена, адже функція буде і приймати, і повертати лише одне значення. `),
            ]),
            paragraph(...[
                sentence(`Але так ніхто не робить... `),
                sentence(`Чому? `),
                sentence(`Тому що це достобіса незручно! `),
                sentence(`Нікому й за дарма не здались всі ці одноразові структури, що вже там говорити про їх формування перед кожним викликом. `),
                sentence(`Та і самі аргументи розміщені всередині стеку дуже схожі на структуру, то чому б не вчинити так і з результатами? `),
                sentence(`Тому я вважаю цей аргумент беззмістовним. `),
                sentence(`Принаймні в тому випадку, якщо ви не збираєтесь загортати в структури ще й аргументи функції. `),
            ]),
        ]),
        // section(paragraph(`Сектанти. `, `Сектанти everywhere. `), ...[
        //     paragraph(...[
        //         sentence(``),
        //         sentence(``),
        //         sentence(``),
        //     ]),
        // ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
            ]),
        ]),
    ),
});
