const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);
const { illustration } = require("../server/documenting/shortcuts");


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    sentence,
    figurative,
    emphasis,
    list,
    link,
    lexeme,
    code,
    js,
    cs,
} = s;


const antimatter = `https://uk.wikipedia.org/wiki/%D0%90%D0%BD%D1%82%D0%B8%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%8F#%D0%A1%D0%B8%D0%BC%D0%B5%D1%82%D1%80%D1%96%D1%8F_%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%97_%D1%96_%D0%B0%D0%BD%D1%82%D0%B8%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D1%96%D1%97`;
const argumentum_ad_antiquitatem = `https://uk.wikipedia.org/wiki/Argumentum_ad_antiquitatem`;
const scotsman = `https://uk.wikipedia.org/wiki/%D0%96%D0%BE%D0%B4%D0%B5%D0%BD_%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B6%D0%BD%D1%96%D0%B9_%D1%88%D0%BE%D1%82%D0%BB%D0%B0%D0%BD%D0%B4%D0%B5%D1%86%D1%8C`;
const cdecl = `https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl`;

const code_1 = illustration(`Різниця між поверненням багатьох результатів та поверненням масиву в JavaScript. `, js(...[
    [ `function returnThree() {` ],
    [ `    // повернення декількох значень` ],
    [ `    return x, y, z;` ],
    [ `}` ],
    [ `` ],
    [ `const x, y, z = returnThree();` ],
    [ `` ],
    [ `function returnThree() {` ],
    [ `    // повернення масиву` ],
    [ `    return [ x, y, z ];` ],
    [ `}` ],
    [ `` ],
    [ `// деструктуризація` ],
    [ `const [ x, y, z ] = returnThree();` ],
]));


exports = module.exports = new h.DocumentResource({
    Document : document([ `Думки вголос. `, `Асиметрія аргументів та результатів функції. ` ],
        {
        },
        section(`Асиметрія.`, ...[
            paragraph(...[
                sentence(`У той час як астрономи та фізики ламають голову над `, link(`порушенням симетрії`, antimatter),` між звичайною матерією та антиматерією, мені не дає спокою інший різновид порушення симетрії. `),
                sentence(`Мене непокоїть те, що функції зазвичай приймають багато аргументів, але повертають лише один результат. `),
                sentence(`Хоча, здавалося б, немає підстав проводити між ними якусь вагому різницю. `),
                sentence(`Я не знайшов окремого терміну для позначення цього явища, тому надалі буду називати його просто `, figurative(`асиметрією`), `. `),
            ]),
            paragraph(...[
                sentence(`Так от, ось ця вся `, figurative(`асиметрія`), ` - це дуже тупо. `),
                sentence(`Я б навіть сказав, що це один з найпоказовіших прецедентів безпідставних та безглуздих особливостей як в колишніх, так і в сучасних мовах. `),
                sentence(`І зараз я поясню чому. `),
            ]),
        ]),
        /**
         * Якось до Конфуція в гості завітала дуже освідчена пані і спитала:
         *  - Поясність мені, мудрецю, чому коли у жінки багато коханців, то її цькують, а коли у чоловіка багато коханок, то його поважають?
         * Перш ніж відповісти Конфуцій завантажив термінал і почав набирати код на С++.
         *  - Скажи, - спитав він здивовану гостю, - коли функція приймає багато значень, це нормально?
         *  - Так, - відповіла жінка.
         *  - А коли функція повертає багато значень?
         *  - Теж нормально. Я ж пишу на пітоні.
         * Конфуцій розлютився і викрикнув:
         *  - Дурепа! Таку притчу зіпсувала!
         */
        section(`Про що взагалі мова?`, ...[
            paragraph(...[
                sentence(`Для прикладу візьмемо С++. `),
                sentence(`Функції у цій мові можуть приймати довільну кількість значень, але повертати здатні не більше ніж одне. `),
                sentence(`Ще цікаво те, що у випадку з аргументами зовсім не обов'язково вказувати їх відсутність. `),
                sentence(`Тобто існує можливість зробити це, використовуючи зарезервоване слово void, але змушувати вас ніхто не стане. `),
                sentence(`А от з результатом так не вийде: ви повинні або вказати його тип, або вказати void. `),
            ]),
            paragraph(...[
                sentence(`Власне, "повернення кількох значень з функції" - одне з доволі частих запитань від новачків. `),
                sentence(`І в середовищі С++ існує принаймні два поширених підходи для вирішення цього завдання. `),
                sentence(`Перший - це повертати з функції структуру з потрібною кількістю полів або масив. `),
                sentence(`Другий підхід - використовувати так звані out-аргументи. `),
                sentence(`Обидва підходи використовуються не лише в С++, але й в інших мовах. `),
                sentence(`В деяких з них (наприклад в С#) вони навіть стають частиною мови і перетворюються на окремі службові слова. `),
            ]),
            paragraph(...[
                sentence(`То в чому ж полягає тупість? `),
                sentence(`Ну хоча б тому, що це незручно та абсолютно несправедливо. `),
                sentence(`Отримання двох значень з функції вимагає додаткових зусиль, в той час як передача двох значень підтримується "з коробки". `),
                sentence(`Аргументують це по-різному, але я не знаю жодного аргументу, який би не можна було обернути проти... аргументів функції (ба-дум-тцц за каламбур). `),
            ]),
            paragraph(...[
                sentence(`Єдине частково прийнятне виправдання для цього - історичне. `),
                sentence(`Математичні функції повертають один результат, тому й мови програмування цим грішать. `),
                sentence(`Але це також говорить і про те, що немає сенсу притримуватись цієї безпідставної практики. `),
                sentence(`Якщо концепція єдиного результату з'явилась випадково і необдумано, то ніхто не заважає викорінити її в будь-який момент. `),
            ]),
        ]),
        section(`Повертайте структуру! `, ...[
            paragraph(...[
                sentence(`Це, можливо, найпопулярніша відповідь на запитання стосовно асиметрії: мовляв повертати кілька значень не можна, зате можна повернути структуру. `),
                sentence(`Правда в залежності від мови і її насичення синтаксичним цукром, можуть з'являтись й додаткові перешкоди: наприклад, може знадобитись оголошення відповідної структури. `),
                sentence(`В мовах без статичної типізації, таких як JavaScript, з цього взагалі не роблять проблему, адже навіть різниця в записі нікчемна `, code_1, `. `),
            ]),
            code_1,
            paragraph(...[
                sentence(`Хоча така відповідь гарно пояснює спосіб виходу з ситуації, але, на жаль, вона зовсім не пояснює причину її виникнення, тому аргумент з неї ніякий. `),
                sentence(`Окрім цього, виходячи з таких же міркувань цілком можна обґрунтувати абсурдність передачі кількох аргументів. `),
                sentence(`Потрібно декілька аргументів - передавай їх структурою або масивом. `),
                sentence(`В такому випадку симетрія буде збережена, адже функція буде і приймати, і повертати лише одне значення. `),
            ]),
            paragraph(...[
                sentence(`Але так ніхто не робить... `),
                sentence(`Чому? `),
                sentence(`Тому що це достобіса незручно! `),
                sentence(`Нікому й за дарма не здались всі ці одноразові структури, що вже там говорити про їх формування перед кожним викликом. `),
                sentence(`Якщо ж ми робимо зручною передачу аргументів, то чому не можемо зробити зручним і повернення значень? `),
                sentence(`Тому я вважаю це швидше контраргументом, який показує беззмістовність асиметрії. `),
                sentence(`Принаймні доти, доки ви не збираєтесь загортати в структури ще й аргументи функції. `),
            ]),
        ]),
        section(`Output-аргументи. `, ...[
            paragraph(...[
                sentence(`Друга стратегія - це  `),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Регістри для повернення результату. `, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Популярні мови повертають лише одне значення. `, ...[
            paragraph(...[
                sentence(`Цей аргумент - `, link(`argumentum ad antiquitatem`, argumentum_ad_antiquitatem), ` - теж можна почути час від часу. `),
                sentence(`Мовля, якби повернення кількох значень і справді було б необхідним, то популярні мови давно б почали його підтримувати. `),
                sentence(`А оскільки це не так, то й множинне повернення не потрібне. `),
                sentence(`У такої аргументації є щонайменше дві проблеми: `),
            ]),
            list(...[
                [
                    `По-перше, ніколи точно не окреслюються межі, де починається і закінчується "необхідність". `,
                    `Наведені приклади зазвичай категоризуються опонентом як `, link(`не справжні шотландці`, scotsman), `, а їх кількість вважається недостатньою для впровадження механізму в мову. `,
                ],
                [
                    `По-друге, це банально не відповідає дійсності. `,
                    `Існують мови, які здатні повертати декілька значень. `,
                    `Причому, це далено не якісь трансценденті мови, вигадані винятково для цього, а досить популярні Python та Lua. `,
                ],
            ]),
            paragraph(...[
                sentence(`... тут про пітон ...`),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(`... тут про луа ...`),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Приклади функцій з кількома результатами. `, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Наслідки. `, ...[
            paragraph(...[
                sentence(`Тут про resolve(x, y, z). `),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(paragraph(`Сектанти. `, `Сектанти everywhere. `), ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
            ]),
        ]),
    ),
});
