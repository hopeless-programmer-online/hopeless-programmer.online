const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    link,
    list,
    sentence,
    // emphasis,
    // figurative,
    // link,
    note,
    illustration,
    code,
    // js,
    // kw,
    v,
    f,
    c,
    // p,
    lt,
    // cm,
} = s;

const cpp = (...x) => code(`c++`, ...x);


const mesa = `https://en.wikipedia.org/wiki/Mesa_(computer_graphics)`;
const glh = cpp(lt(`gl.h`));
const glew = cpp(lt(`glew`));
const glfw = cpp(lt(`glfw`));
const GLuint = cpp(c(`GLuint`));
const glCreateBuffers = cpp(f(`glCreateBuffers`));
const glNamedBufferStorage = cpp(f(`glNamedBufferStorage`));


const code_1 = illustration(`Створення буфера для зберігання вершин.`, cpp(...[
    [ c(`GLuint`), ` `, v(`vertices_buffer_handle`), `;` ],
    [ `` ],
    [ f(`glCreateBuffers`), `(`, lt(`1`), `, &`, v(`vertices_buffer_handle`), `);` ],
]));
const code_2 = illustration(``, cpp(...[
    [ `class Vertex` ],
    [ `{` ],
    [ `    float x;` ],
    [ `    float y;` ],
    [ `};` ],
    [ `` ],
    [ `const std::vector<Vertex> vertices =` ],
    [ `{` ],
    [ `    { -0.5f, -0.5f },` ],
    [ `    { +0.5f, -0.5f },` ],
    [ `    { +0.0f, +0.5f },` ],
    [ `};` ],
]));
const image_1 = illustration(`Растеризація векторних фігур.`,
    new documenting.ImageIllustrationContent({ Url : `/media/cg-2/rasterization.svg` }),
);


exports = module.exports = new h.DocumentResource({
    Document : document(
        [
            sentence(`Програмування комп'ютерної графіки. `),
            sentence(`Графічний конвеєр.`),
        ],
        { Date : new Date(`2020-06-24`) },
        section(`Будова графічного конвеєра.`, ...[
            paragraph(...[
                sentence(`Робота графічного конвеєра зводиться до обробки та виводу на екран графічних об'єктів. `),
                sentence(`За десятки років цей процес розбився на спеціалізовані етапи і набув тої форми, яку він має зараз. `),
                sentence(`Графічні об'єкти розбиваються на окремі графічні примітиви, з якими може працювати GPU. `),
                sentence(`Далі, ці примітиви зберігаються в його оперативній пам'яті разом з іншими даними необхідними для виводу і починається їх обробка. `),
                sentence(`В процесі обробки можуть бути залучені різні етапи конвеєра які перетворюють примітиви, тестують їх і навіть створюють нові. `),
                sentence(`В решті-решт, графічні примітиви перетворюються в набори пікселів на екрані, розраховується їх кінцевий колір і відбувається оновлення екрану. `),
                sentence(`Лише після цього користувач може на власні очі побачити результат роботи конвеєра. `),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Графічні примітиви.`, ...[
            paragraph(...[
                sentence(`Основними одиницями з якими працює графічний конвеєр є графічні примітиви: точки, лінії та трикунтники`, note(`Взагалі цей список можна розширити квадами, списками трикутників, контурами і іншими специфічними примітивами, але всі вони так чи інакше зводяться до цієї базової трійки. `), `. `),
                sentence(`Вони складаються з вершин: одної, двох та трьох відповідно, а кожна вершина має фіксований набір атрибутів. `),
                sentence(`Загалом, атрибути можна вважати просто числами, які мають для нас певний сенс з точки зору вирішуваної задачі. `),
                sentence(`Наприклад, вершини можуть мати такі атрибути як розташування, колір, температуру, нормаль, прозорість і т.д., які за допомогою чисел описують певні фізичні або вигадані величини. `),
            ]),
            paragraph(...[
                sentence(`Ефективність конвеєра сильно залежить від того, наскільки одноманітною є його робота. `),
                sentence(`Вони влаштовані таким чином, що експлуатують "шаблонність" алгоритмів при обробці вершин. `),
                sentence(`Це означає, що задля найкращого результату кожна вершина чи примітив повинні володіти найменшою кількістю індивідуальних ознак, що впливають на їх обробку`, note([ sentence(`Можна привести аналогію з формами для відтискання. `), sentence(`Якщо на одній формі розмістити багато шаблонів, то за один рух можна буде витиснути багато об'єктів. `), sentence(`Якщо ж багато об'єктів будуть потребувати індивідуального відтискання то потрібна буде додаткова кількість операцій, які, до того ж, доведеться синхронізувати. `) ]), `. `),
                sentence(`Тому, в межах роботи графічного конвеєра - одного виводу - можна виводити лише один тип графічних примітивів. `),
                sentence(`Також, усі вершини цих примітивів повинні мати одинаковий набір атрибутів та одинакову структуру. `),
            ]),
        ]),
        section(`Растеризація.`, ...[
            paragraph(...[
                sentence(`Процес обробки примітивів завершується обчисленням розташування їх вершин в межах області виводу. `),
                sentence(`Можна вважати що ця область є віртуальним екраном з координатною сіткою, на якому ми й розміщуємо вершини. `),
                sentence(`Розташування кожної з них описується четвіркою чисел: x, y, z і w, що лежать в діапазоні [-1, +1]. `),
                sentence(`Координати x та y визначають горизонтальне і вертикальне розташування, де [-1,-1] вважається лівим нижнім кутом області, а [+1,+1] - правим верхнім`, note([ `Напрямок вісі Y може відрізнятись для різних графічних API. `, `Так, наприклад, для DirectX і Vulkan вісь Y скерована зверху-вниз, тоді як для OpenGL вона скерована знизу-вверх. ` ]), `. `),
                sentence(`Координати z і w є менш очевидними і використовуються для роботи з глибиною та для розрахунку перспективи, про що ми поговоримо в інших статтях. `),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(`Область виводу.`, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
    ),
});
