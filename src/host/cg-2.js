const hosting = require(`../server/hosting`);
const documenting = require(`../server/documenting`);


const h = hosting;
const s = documenting.shortcuts;
const {
    document,
    section,
    paragraph,
    link,
    list,
    sentence,
    // emphasis,
    // figurative,
    // link,
    note,
    // illustration,
    code,
    // js,
    // kw,
    // v,
    // f,
    // c,
    // p,
    lt,
    // cm,
} = s;

const cpp = (...x) => code(`c++`, ...x);


const mesa = `https://en.wikipedia.org/wiki/Mesa_(computer_graphics)`;
const glh = cpp(lt(`gl.h`));
const glew = cpp(lt(`glew`));
const glfw = cpp(lt(`glfw`));


exports = module.exports = new h.DocumentResource({
    Document : document(
        [
            sentence(`Програмування комп'ютерної графіки. `),
            sentence(`OpenGL/С++. `),
            sentence(`"Привіт, трикутник!".`),
        ],
        { Date : new Date(`2020-06-24`) },
        section(`Що таке OpenGL?`, ...[
            paragraph(...[
                sentence(`OpenGL - це специфікація графічного інтерфейсу. `),
                sentence(`Якщо коротко - це набір структур та функцій, за допомогою яких можна виводити комп'ютерну графіку. `),
                sentence(`Ці функції не залежать від платформи, операційної системи чи мови програмування, а тому можуть бути реалізовані у вигляді драйверів або бібліотек коду. `),
                sentence(`Сьогодні OpenGL доступний для наступних платформ: `),
            ]),
            list(...[
                [
                    sentence(`Операційних систем Windows (включно з Windows 10), Linux та MacOS. `),
                ],
                [
                    sentence(`Відеокарт NVidia, AMD та Intel. `),
                ],
                [
                    sentence(`Доступний у вигляді бібліотек для мов С/С++, Python, C# та інших. `),
                ],
                [
                    sentence(`У якості програмної реалізації в бібліотеці `, link(`Mesa3D`, mesa), `. `),
                ],
            ]),
            paragraph(...[
                sentence(`Також у OpenGL є "дочірні" специфікації, для платформ відмінних від настільних комп'ютерів. `),
                sentence(`Усі вони в більшій мірі повторюють OpenGL, але все ж вважаються окремими проектами і займають окремі ніші на ринку. `),
                sentence(`Зокрема, це:`),
            ]),
            list(...[
                [
                    sentence(`OpenGL ES. `),
                    sentence(`Використовується на мобільних пристроях та ігрових консолях. `),
                ],
                [
                    sentence(`OpenGL SC. `),
                    sentence(`Використовується на промисловому та медичному обладнанні. `),
                ],
                [
                    sentence(`WebGL. `),
                    sentence(`Використовується в браузерах. `),
                ],
            ]),
            paragraph(...[
                sentence(`Головним героєм цієї серії статей буде реалізація OpenGL для С/С++ та Windows - бібліотека `, glh, `. `),
                sentence(`Також, для спрощення подальшої роботи, ми будемо використовувати бібліотеки `, glew, ` та `, glfw, `. `),
                sentence(`Вони допоможуть нам працювати з контекстом OpenGL (що особливо важливо при роботі з Windows), а також з вікнами та користувацьким вводом. `),
                sentence(`Ми почнемо з найпростішого ознайомчого завдання, класичного для комп'ютерної графіки - виведення на екран трикутника. `),
            ]),
        ]),
        section(`Графічний конвеєр OpenGL.`, ...[
            paragraph(...[
                sentence(`Графічний конвеєр OpenGL в першу чергу призначений для растеризації та виводу геометричних примітивів. `),
                sentence(`Ці геометричні примітиви є точками, лініями або трикутниками, а усі складніші фігури є їх композицією. `),
                sentence(`З трикутників, наприклад, можна зібрати сферу, чайник або навіть цілий ігровий рівень. `),
            ]),
            // можливо тут варто дати приклад того, як з трикутників можна побудувати сферу чи зайця
            paragraph(...[
                sentence(`Процес обробки примітивів у конвеєрі є доволі складним, але ми почнемо зі спрощеної моделі. `),
                sentence(`Кожен примітив задається певною кількістю вершин: однією для точки, парою для лінії та трійкою для трикутника. `),
                sentence(`Ці вершини розміщуються на екрані у відносних - векторних - координатах, які не залежать від його роздільної здатності. `),
                sentence(`Екран, натомість, розбитий на пікселі - окремі квадратні фрагменти, заповнені суцільним кольором. `),
                sentence(`Таку форму - прямокутну сітку розбиту на пікселі - називають растровою. `),
            ]),
            paragraph(...[
                sentence(`Для того, аби відобразити зображення на екрані, потрібно перетворити геометричні фігури з векторної форми в растрову. `),
                sentence(`Цей процес називається растеризацією: під час нього визначається, яким пікселям на екрані відповідають геометричні фігури і який у цих пікселів колір. `),
                sentence(`Оскільки розміщення об'єктів, їх поворот і масштаб можуть змінюватись - цей процес є необхідним для їх точного відображення. `),
            ]),
        ]),
        section(`Буфери даних.`, ...[
            paragraph(...[
                sentence(`Отож, для того щоб відобразити об'єкт на екрані - спочатку потрібно передати його графічному конвеєру у вигляді примітивів. `),
                sentence(`А найпростішим способом передати дані на GPU є буфер даних. `),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(`... тут про вікна ...`),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
        section(``, ...[
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
            paragraph(...[
                sentence(``),
                sentence(``),
                sentence(``),
            ]),
        ]),
    ),
});
